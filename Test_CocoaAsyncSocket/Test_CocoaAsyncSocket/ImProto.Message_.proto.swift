// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Message.proto

import Foundation
import ProtocolBuffers


public extension ImProto{}

public func == (lhs: ImProto.MsgData, rhs: ImProto.MsgData) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasToSessionId == rhs.hasToSessionId) && (!lhs.hasToSessionId || lhs.toSessionId == rhs.toSessionId)
  fieldCheck = fieldCheck && (lhs.hasMsgId == rhs.hasMsgId) && (!lhs.hasMsgId || lhs.msgId == rhs.msgId)
  fieldCheck = fieldCheck && (lhs.hasCreateTime == rhs.hasCreateTime) && (!lhs.hasCreateTime || lhs.createTime == rhs.createTime)
  fieldCheck = fieldCheck && (lhs.hasMsgType == rhs.hasMsgType) && (!lhs.hasMsgType || lhs.msgType == rhs.msgType)
  fieldCheck = fieldCheck && (lhs.hasMsgData == rhs.hasMsgData) && (!lhs.hasMsgData || lhs.msgData == rhs.msgData)
  fieldCheck = fieldCheck && (lhs.hasAttachData == rhs.hasAttachData) && (!lhs.hasAttachData || lhs.attachData == rhs.attachData)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.MsgDataAck, rhs: ImProto.MsgDataAck) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsgId == rhs.hasMsgId) && (!lhs.hasMsgId || lhs.msgId == rhs.msgId)
  fieldCheck = fieldCheck && (lhs.hasFromUserId == rhs.hasFromUserId) && (!lhs.hasFromUserId || lhs.fromUserId == rhs.fromUserId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.MsgDataReadAck, rhs: ImProto.MsgDataReadAck) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsgId == rhs.hasMsgId) && (!lhs.hasMsgId || lhs.msgId == rhs.msgId)
  fieldCheck = fieldCheck && (lhs.hasFromUserId == rhs.hasFromUserId) && (!lhs.hasFromUserId || lhs.fromUserId == rhs.fromUserId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension ImProto {
  public struct Message_Root {
    public static var sharedInstance : Message_Root {
     struct Static {
         static let instance : Message_Root = Message_Root()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ImProto.BaseDefineRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  // 发送信息
  final public class MsgData : GeneratedMessage, GeneratedMessageProtocol {
    //消息接受方
    public private(set) var toSessionId:String = ""

    public private(set) var hasToSessionId:Bool = false
    public private(set) var msgId:UInt32 = UInt32(0)

    public private(set) var hasMsgId:Bool = false
    public private(set) var createTime:UInt64 = UInt64(0)

    public private(set) var hasCreateTime:Bool = false
    public private(set) var msgType:ImProto.MsgType = ImProto.MsgType.MsgTypeSingleText
    public private(set) var hasMsgType:Bool = false
    public private(set) var msgData:NSData = NSData()

    public private(set) var hasMsgData:Bool = false
    public private(set) var attachData:NSData = NSData()

    public private(set) var hasAttachData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasToSessionId {
        return false
      }
      if !hasMsgId {
        return false
      }
      if !hasCreateTime {
        return false
      }
      if !hasMsgType {
        return false
      }
      if !hasMsgData {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasToSessionId {
        try output.writeString(1, value:toSessionId)
      }
      if hasMsgId {
        try output.writeUInt32(2, value:msgId)
      }
      if hasCreateTime {
        try output.writeUInt64(3, value:createTime)
      }
      if hasMsgType {
        try output.writeEnum(4, value:msgType.rawValue)
      }
      if hasMsgData {
        try output.writeData(5, value:msgData)
      }
      if hasAttachData {
        try output.writeData(6, value:attachData)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasToSessionId {
        serialize_size += toSessionId.computeStringSize(1)
      }
      if hasMsgId {
        serialize_size += msgId.computeUInt32Size(2)
      }
      if hasCreateTime {
        serialize_size += createTime.computeUInt64Size(3)
      }
      if (hasMsgType) {
        serialize_size += msgType.rawValue.computeEnumSize(4)
      }
      if hasMsgData {
        serialize_size += msgData.computeDataSize(5)
      }
      if hasAttachData {
        serialize_size += attachData.computeDataSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.MsgData> {
      var mergedArray = Array<ImProto.MsgData>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.MsgData? {
      return try ImProto.MsgData.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.MsgData {
      return try ImProto.MsgData.Builder().mergeFromData(data, extensionRegistry:ImProto.Message_Root.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgData {
      return try ImProto.MsgData.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.MsgData {
      return try ImProto.MsgData.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgData {
      return try ImProto.MsgData.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.MsgData {
      return try ImProto.MsgData.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgData {
      return try ImProto.MsgData.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.MsgData.Builder {
      return ImProto.MsgData.classBuilder() as! ImProto.MsgData.Builder
    }
    public func getBuilder() -> ImProto.MsgData.Builder {
      return classBuilder() as! ImProto.MsgData.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.MsgData.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.MsgData.Builder()
    }
    public func toBuilder() throws -> ImProto.MsgData.Builder {
      return try ImProto.MsgData.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.MsgData) throws -> ImProto.MsgData.Builder {
      return try ImProto.MsgData.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasToSessionId {
        output += "\(indent) toSessionId: \(toSessionId) \n"
      }
      if hasMsgId {
        output += "\(indent) msgId: \(msgId) \n"
      }
      if hasCreateTime {
        output += "\(indent) createTime: \(createTime) \n"
      }
      if (hasMsgType) {
        output += "\(indent) msgType: \(msgType.description)\n"
      }
      if hasMsgData {
        output += "\(indent) msgData: \(msgData) \n"
      }
      if hasAttachData {
        output += "\(indent) attachData: \(attachData) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasToSessionId {
               hashCode = (hashCode &* 31) &+ toSessionId.hashValue
            }
            if hasMsgId {
               hashCode = (hashCode &* 31) &+ msgId.hashValue
            }
            if hasCreateTime {
               hashCode = (hashCode &* 31) &+ createTime.hashValue
            }
            if hasMsgType {
               hashCode = (hashCode &* 31) &+ Int(msgType.rawValue)
            }
            if hasMsgData {
               hashCode = (hashCode &* 31) &+ msgData.hashValue
            }
            if hasAttachData {
               hashCode = (hashCode &* 31) &+ attachData.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.MsgData"
    }
    override public func className() -> String {
        return "ImProto.MsgData"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.MsgData.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.MsgData = ImProto.MsgData()
      public func getMessage() -> ImProto.MsgData {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasToSessionId:Bool {
           get {
                return builderResult.hasToSessionId
           }
      }
      public var toSessionId:String {
           get {
                return builderResult.toSessionId
           }
           set (value) {
               builderResult.hasToSessionId = true
               builderResult.toSessionId = value
           }
      }
      public func setToSessionId(value:String) -> ImProto.MsgData.Builder {
        self.toSessionId = value
        return self
      }
      public func clearToSessionId() -> ImProto.MsgData.Builder{
           builderResult.hasToSessionId = false
           builderResult.toSessionId = ""
           return self
      }
      public var hasMsgId:Bool {
           get {
                return builderResult.hasMsgId
           }
      }
      public var msgId:UInt32 {
           get {
                return builderResult.msgId
           }
           set (value) {
               builderResult.hasMsgId = true
               builderResult.msgId = value
           }
      }
      public func setMsgId(value:UInt32) -> ImProto.MsgData.Builder {
        self.msgId = value
        return self
      }
      public func clearMsgId() -> ImProto.MsgData.Builder{
           builderResult.hasMsgId = false
           builderResult.msgId = UInt32(0)
           return self
      }
      public var hasCreateTime:Bool {
           get {
                return builderResult.hasCreateTime
           }
      }
      public var createTime:UInt64 {
           get {
                return builderResult.createTime
           }
           set (value) {
               builderResult.hasCreateTime = true
               builderResult.createTime = value
           }
      }
      public func setCreateTime(value:UInt64) -> ImProto.MsgData.Builder {
        self.createTime = value
        return self
      }
      public func clearCreateTime() -> ImProto.MsgData.Builder{
           builderResult.hasCreateTime = false
           builderResult.createTime = UInt64(0)
           return self
      }
        public var hasMsgType:Bool{
            get {
                return builderResult.hasMsgType
            }
        }
        public var msgType:ImProto.MsgType {
            get {
                return builderResult.msgType
            }
            set (value) {
                builderResult.hasMsgType = true
                builderResult.msgType = value
            }
        }
        public func setMsgType(value:ImProto.MsgType) -> ImProto.MsgData.Builder {
          self.msgType = value
          return self
        }
        public func clearMsgType() -> ImProto.MsgData.Builder {
           builderResult.hasMsgType = false
           builderResult.msgType = .MsgTypeSingleText
           return self
        }
      public var hasMsgData:Bool {
           get {
                return builderResult.hasMsgData
           }
      }
      public var msgData:NSData {
           get {
                return builderResult.msgData
           }
           set (value) {
               builderResult.hasMsgData = true
               builderResult.msgData = value
           }
      }
      public func setMsgData(value:NSData) -> ImProto.MsgData.Builder {
        self.msgData = value
        return self
      }
      public func clearMsgData() -> ImProto.MsgData.Builder{
           builderResult.hasMsgData = false
           builderResult.msgData = NSData()
           return self
      }
      public var hasAttachData:Bool {
           get {
                return builderResult.hasAttachData
           }
      }
      public var attachData:NSData {
           get {
                return builderResult.attachData
           }
           set (value) {
               builderResult.hasAttachData = true
               builderResult.attachData = value
           }
      }
      public func setAttachData(value:NSData) -> ImProto.MsgData.Builder {
        self.attachData = value
        return self
      }
      public func clearAttachData() -> ImProto.MsgData.Builder{
           builderResult.hasAttachData = false
           builderResult.attachData = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.MsgData.Builder {
        builderResult = ImProto.MsgData()
        return self
      }
      public override func clone() throws -> ImProto.MsgData.Builder {
        return try ImProto.MsgData.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.MsgData {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.MsgData {
        let returnMe:ImProto.MsgData = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.MsgData) throws -> ImProto.MsgData.Builder {
        if other == ImProto.MsgData() {
         return self
        }
        if other.hasToSessionId {
             toSessionId = other.toSessionId
        }
        if other.hasMsgId {
             msgId = other.msgId
        }
        if other.hasCreateTime {
             createTime = other.createTime
        }
        if other.hasMsgType {
             msgType = other.msgType
        }
        if other.hasMsgData {
             msgData = other.msgData
        }
        if other.hasAttachData {
             attachData = other.attachData
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.MsgData.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgData.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            toSessionId = try input.readString()

          case 16 :
            msgId = try input.readUInt32()

          case 24 :
            createTime = try input.readUInt64()

          case 32 :
            let valueIntmsgType = try input.readEnum()
            if let enumsmsgType = ImProto.MsgType(rawValue:valueIntmsgType){
                 msgType = enumsmsgType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntmsgType))
            }

          case 42 :
            msgData = try input.readData()

          case 50 :
            attachData = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // 接收信息回执
  final public class MsgDataAck : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var msgId:UInt32 = UInt32(0)

    public private(set) var hasMsgId:Bool = false
    public private(set) var fromUserId:String = ""

    public private(set) var hasFromUserId:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasMsgId {
        return false
      }
      if !hasFromUserId {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMsgId {
        try output.writeUInt32(1, value:msgId)
      }
      if hasFromUserId {
        try output.writeString(2, value:fromUserId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMsgId {
        serialize_size += msgId.computeUInt32Size(1)
      }
      if hasFromUserId {
        serialize_size += fromUserId.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.MsgDataAck> {
      var mergedArray = Array<ImProto.MsgDataAck>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.MsgDataAck? {
      return try ImProto.MsgDataAck.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.MsgDataAck {
      return try ImProto.MsgDataAck.Builder().mergeFromData(data, extensionRegistry:ImProto.Message_Root.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgDataAck {
      return try ImProto.MsgDataAck.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.MsgDataAck {
      return try ImProto.MsgDataAck.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgDataAck {
      return try ImProto.MsgDataAck.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.MsgDataAck {
      return try ImProto.MsgDataAck.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgDataAck {
      return try ImProto.MsgDataAck.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.MsgDataAck.Builder {
      return ImProto.MsgDataAck.classBuilder() as! ImProto.MsgDataAck.Builder
    }
    public func getBuilder() -> ImProto.MsgDataAck.Builder {
      return classBuilder() as! ImProto.MsgDataAck.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.MsgDataAck.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.MsgDataAck.Builder()
    }
    public func toBuilder() throws -> ImProto.MsgDataAck.Builder {
      return try ImProto.MsgDataAck.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.MsgDataAck) throws -> ImProto.MsgDataAck.Builder {
      return try ImProto.MsgDataAck.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasMsgId {
        output += "\(indent) msgId: \(msgId) \n"
      }
      if hasFromUserId {
        output += "\(indent) fromUserId: \(fromUserId) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMsgId {
               hashCode = (hashCode &* 31) &+ msgId.hashValue
            }
            if hasFromUserId {
               hashCode = (hashCode &* 31) &+ fromUserId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.MsgDataAck"
    }
    override public func className() -> String {
        return "ImProto.MsgDataAck"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.MsgDataAck.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.MsgDataAck = ImProto.MsgDataAck()
      public func getMessage() -> ImProto.MsgDataAck {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMsgId:Bool {
           get {
                return builderResult.hasMsgId
           }
      }
      public var msgId:UInt32 {
           get {
                return builderResult.msgId
           }
           set (value) {
               builderResult.hasMsgId = true
               builderResult.msgId = value
           }
      }
      public func setMsgId(value:UInt32) -> ImProto.MsgDataAck.Builder {
        self.msgId = value
        return self
      }
      public func clearMsgId() -> ImProto.MsgDataAck.Builder{
           builderResult.hasMsgId = false
           builderResult.msgId = UInt32(0)
           return self
      }
      public var hasFromUserId:Bool {
           get {
                return builderResult.hasFromUserId
           }
      }
      public var fromUserId:String {
           get {
                return builderResult.fromUserId
           }
           set (value) {
               builderResult.hasFromUserId = true
               builderResult.fromUserId = value
           }
      }
      public func setFromUserId(value:String) -> ImProto.MsgDataAck.Builder {
        self.fromUserId = value
        return self
      }
      public func clearFromUserId() -> ImProto.MsgDataAck.Builder{
           builderResult.hasFromUserId = false
           builderResult.fromUserId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.MsgDataAck.Builder {
        builderResult = ImProto.MsgDataAck()
        return self
      }
      public override func clone() throws -> ImProto.MsgDataAck.Builder {
        return try ImProto.MsgDataAck.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.MsgDataAck {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.MsgDataAck {
        let returnMe:ImProto.MsgDataAck = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.MsgDataAck) throws -> ImProto.MsgDataAck.Builder {
        if other == ImProto.MsgDataAck() {
         return self
        }
        if other.hasMsgId {
             msgId = other.msgId
        }
        if other.hasFromUserId {
             fromUserId = other.fromUserId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.MsgDataAck.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgDataAck.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            msgId = try input.readUInt32()

          case 18 :
            fromUserId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // 阅读信息回执
  final public class MsgDataReadAck : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var msgId:UInt32 = UInt32(0)

    public private(set) var hasMsgId:Bool = false
    public private(set) var fromUserId:String = ""

    public private(set) var hasFromUserId:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasMsgId {
        return false
      }
      if !hasFromUserId {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMsgId {
        try output.writeUInt32(1, value:msgId)
      }
      if hasFromUserId {
        try output.writeString(2, value:fromUserId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMsgId {
        serialize_size += msgId.computeUInt32Size(1)
      }
      if hasFromUserId {
        serialize_size += fromUserId.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.MsgDataReadAck> {
      var mergedArray = Array<ImProto.MsgDataReadAck>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.MsgDataReadAck? {
      return try ImProto.MsgDataReadAck.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.MsgDataReadAck {
      return try ImProto.MsgDataReadAck.Builder().mergeFromData(data, extensionRegistry:ImProto.Message_Root.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgDataReadAck {
      return try ImProto.MsgDataReadAck.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.MsgDataReadAck {
      return try ImProto.MsgDataReadAck.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgDataReadAck {
      return try ImProto.MsgDataReadAck.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.MsgDataReadAck {
      return try ImProto.MsgDataReadAck.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgDataReadAck {
      return try ImProto.MsgDataReadAck.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.MsgDataReadAck.Builder {
      return ImProto.MsgDataReadAck.classBuilder() as! ImProto.MsgDataReadAck.Builder
    }
    public func getBuilder() -> ImProto.MsgDataReadAck.Builder {
      return classBuilder() as! ImProto.MsgDataReadAck.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.MsgDataReadAck.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.MsgDataReadAck.Builder()
    }
    public func toBuilder() throws -> ImProto.MsgDataReadAck.Builder {
      return try ImProto.MsgDataReadAck.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.MsgDataReadAck) throws -> ImProto.MsgDataReadAck.Builder {
      return try ImProto.MsgDataReadAck.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasMsgId {
        output += "\(indent) msgId: \(msgId) \n"
      }
      if hasFromUserId {
        output += "\(indent) fromUserId: \(fromUserId) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMsgId {
               hashCode = (hashCode &* 31) &+ msgId.hashValue
            }
            if hasFromUserId {
               hashCode = (hashCode &* 31) &+ fromUserId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.MsgDataReadAck"
    }
    override public func className() -> String {
        return "ImProto.MsgDataReadAck"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.MsgDataReadAck.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.MsgDataReadAck = ImProto.MsgDataReadAck()
      public func getMessage() -> ImProto.MsgDataReadAck {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMsgId:Bool {
           get {
                return builderResult.hasMsgId
           }
      }
      public var msgId:UInt32 {
           get {
                return builderResult.msgId
           }
           set (value) {
               builderResult.hasMsgId = true
               builderResult.msgId = value
           }
      }
      public func setMsgId(value:UInt32) -> ImProto.MsgDataReadAck.Builder {
        self.msgId = value
        return self
      }
      public func clearMsgId() -> ImProto.MsgDataReadAck.Builder{
           builderResult.hasMsgId = false
           builderResult.msgId = UInt32(0)
           return self
      }
      public var hasFromUserId:Bool {
           get {
                return builderResult.hasFromUserId
           }
      }
      public var fromUserId:String {
           get {
                return builderResult.fromUserId
           }
           set (value) {
               builderResult.hasFromUserId = true
               builderResult.fromUserId = value
           }
      }
      public func setFromUserId(value:String) -> ImProto.MsgDataReadAck.Builder {
        self.fromUserId = value
        return self
      }
      public func clearFromUserId() -> ImProto.MsgDataReadAck.Builder{
           builderResult.hasFromUserId = false
           builderResult.fromUserId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.MsgDataReadAck.Builder {
        builderResult = ImProto.MsgDataReadAck()
        return self
      }
      public override func clone() throws -> ImProto.MsgDataReadAck.Builder {
        return try ImProto.MsgDataReadAck.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.MsgDataReadAck {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.MsgDataReadAck {
        let returnMe:ImProto.MsgDataReadAck = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.MsgDataReadAck) throws -> ImProto.MsgDataReadAck.Builder {
        if other == ImProto.MsgDataReadAck() {
         return self
        }
        if other.hasMsgId {
             msgId = other.msgId
        }
        if other.hasFromUserId {
             fromUserId = other.fromUserId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.MsgDataReadAck.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MsgDataReadAck.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            msgId = try input.readUInt32()

          case 18 :
            fromUserId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
