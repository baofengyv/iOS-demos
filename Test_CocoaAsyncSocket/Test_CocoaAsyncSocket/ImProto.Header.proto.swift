// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Header.proto

import Foundation
import ProtocolBuffers


public extension ImProto{}

public func == (lhs: ImProto.Header, rhs: ImProto.Header) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasSerialNumber == rhs.hasSerialNumber) && (!lhs.hasSerialNumber || lhs.serialNumber == rhs.serialNumber)
  fieldCheck = fieldCheck && (lhs.hasMessageType == rhs.hasMessageType) && (!lhs.hasMessageType || lhs.messageType == rhs.messageType)
  fieldCheck = fieldCheck && (lhs.hasCmdId == rhs.hasCmdId) && (!lhs.hasCmdId || lhs.cmdId == rhs.cmdId)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.reduns == rhs.reduns)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension ImProto {
  public struct HeaderRoot {
    public static var sharedInstance : HeaderRoot {
     struct Static {
         static let instance : HeaderRoot = HeaderRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ImProto.BaseDefineRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class Header : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var version:String = "1.0.0"

    public private(set) var hasVersion:Bool = false
    public private(set) var serialNumber:Int32 = Int32(0)

    public private(set) var hasSerialNumber:Bool = false
    public private(set) var messageType:ImProto.MessageTypeId = ImProto.MessageTypeId.SidMsg
    public private(set) var hasMessageType:Bool = false
    public private(set) var cmdId:Int32 = Int32(0)

    public private(set) var hasCmdId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var reduns:Array<ImProto.MapFieldEntry>  = Array<ImProto.MapFieldEntry>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasSerialNumber {
        return false
      }
      if !hasMessageType {
        return false
      }
      if !hasCmdId {
        return false
      }
      var isInitreduns:Bool = true
      for oneElementreduns in reduns {
          if (!oneElementreduns.isInitialized()) {
              isInitreduns = false
              break 
          }
      }
      if !isInitreduns {
       return isInitreduns
       }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeString(1, value:version)
      }
      if hasSerialNumber {
        try output.writeInt32(2, value:serialNumber)
      }
      if hasMessageType {
        try output.writeEnum(3, value:messageType.rawValue)
      }
      if hasCmdId {
        try output.writeInt32(4, value:cmdId)
      }
      if hasUserId {
        try output.writeString(5, value:userId)
      }
      for oneElementreduns in reduns {
          try output.writeMessage(6, value:oneElementreduns)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeStringSize(1)
      }
      if hasSerialNumber {
        serialize_size += serialNumber.computeInt32Size(2)
      }
      if (hasMessageType) {
        serialize_size += messageType.rawValue.computeEnumSize(3)
      }
      if hasCmdId {
        serialize_size += cmdId.computeInt32Size(4)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(5)
      }
      for oneElementreduns in reduns {
          serialize_size += oneElementreduns.computeMessageSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.Header> {
      var mergedArray = Array<ImProto.Header>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.Header? {
      return try ImProto.Header.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.Header {
      return try ImProto.Header.Builder().mergeFromData(data, extensionRegistry:ImProto.HeaderRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.Header {
      return try ImProto.Header.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.Header {
      return try ImProto.Header.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.Header {
      return try ImProto.Header.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.Header {
      return try ImProto.Header.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.Header {
      return try ImProto.Header.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.Header.Builder {
      return ImProto.Header.classBuilder() as! ImProto.Header.Builder
    }
    public func getBuilder() -> ImProto.Header.Builder {
      return classBuilder() as! ImProto.Header.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.Header.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.Header.Builder()
    }
    public func toBuilder() throws -> ImProto.Header.Builder {
      return try ImProto.Header.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.Header) throws -> ImProto.Header.Builder {
      return try ImProto.Header.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasSerialNumber {
        output += "\(indent) serialNumber: \(serialNumber) \n"
      }
      if (hasMessageType) {
        output += "\(indent) messageType: \(messageType.description)\n"
      }
      if hasCmdId {
        output += "\(indent) cmdId: \(cmdId) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      var redunsElementIndex:Int = 0
      for oneElementreduns in reduns {
          output += "\(indent) reduns[\(redunsElementIndex)] {\n"
          output += try oneElementreduns.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          redunsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasSerialNumber {
               hashCode = (hashCode &* 31) &+ serialNumber.hashValue
            }
            if hasMessageType {
               hashCode = (hashCode &* 31) &+ Int(messageType.rawValue)
            }
            if hasCmdId {
               hashCode = (hashCode &* 31) &+ cmdId.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            for oneElementreduns in reduns {
                hashCode = (hashCode &* 31) &+ oneElementreduns.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.Header"
    }
    override public func className() -> String {
        return "ImProto.Header"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.Header.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.Header = ImProto.Header()
      public func getMessage() -> ImProto.Header {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:String {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:String) -> ImProto.Header.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> ImProto.Header.Builder{
           builderResult.hasVersion = false
           builderResult.version = "1.0.0"
           return self
      }
      public var hasSerialNumber:Bool {
           get {
                return builderResult.hasSerialNumber
           }
      }
      public var serialNumber:Int32 {
           get {
                return builderResult.serialNumber
           }
           set (value) {
               builderResult.hasSerialNumber = true
               builderResult.serialNumber = value
           }
      }
      public func setSerialNumber(value:Int32) -> ImProto.Header.Builder {
        self.serialNumber = value
        return self
      }
      public func clearSerialNumber() -> ImProto.Header.Builder{
           builderResult.hasSerialNumber = false
           builderResult.serialNumber = Int32(0)
           return self
      }
        public var hasMessageType:Bool{
            get {
                return builderResult.hasMessageType
            }
        }
        public var messageType:ImProto.MessageTypeId {
            get {
                return builderResult.messageType
            }
            set (value) {
                builderResult.hasMessageType = true
                builderResult.messageType = value
            }
        }
        public func setMessageType(value:ImProto.MessageTypeId) -> ImProto.Header.Builder {
          self.messageType = value
          return self
        }
        public func clearMessageType() -> ImProto.Header.Builder {
           builderResult.hasMessageType = false
           builderResult.messageType = .SidMsg
           return self
        }
      public var hasCmdId:Bool {
           get {
                return builderResult.hasCmdId
           }
      }
      public var cmdId:Int32 {
           get {
                return builderResult.cmdId
           }
           set (value) {
               builderResult.hasCmdId = true
               builderResult.cmdId = value
           }
      }
      public func setCmdId(value:Int32) -> ImProto.Header.Builder {
        self.cmdId = value
        return self
      }
      public func clearCmdId() -> ImProto.Header.Builder{
           builderResult.hasCmdId = false
           builderResult.cmdId = Int32(0)
           return self
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> ImProto.Header.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> ImProto.Header.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
      public var reduns:Array<ImProto.MapFieldEntry> {
           get {
               return builderResult.reduns
           }
           set (value) {
               builderResult.reduns = value
           }
      }
      public func setReduns(value:Array<ImProto.MapFieldEntry>) -> ImProto.Header.Builder {
        self.reduns = value
        return self
      }
      public func clearReduns() -> ImProto.Header.Builder {
        builderResult.reduns.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.Header.Builder {
        builderResult = ImProto.Header()
        return self
      }
      public override func clone() throws -> ImProto.Header.Builder {
        return try ImProto.Header.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.Header {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.Header {
        let returnMe:ImProto.Header = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.Header) throws -> ImProto.Header.Builder {
        if other == ImProto.Header() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasSerialNumber {
             serialNumber = other.serialNumber
        }
        if other.hasMessageType {
             messageType = other.messageType
        }
        if other.hasCmdId {
             cmdId = other.cmdId
        }
        if other.hasUserId {
             userId = other.userId
        }
        if !other.reduns.isEmpty  {
           builderResult.reduns += other.reduns
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.Header.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.Header.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            version = try input.readString()

          case 16 :
            serialNumber = try input.readInt32()

          case 24 :
            let valueIntmessageType = try input.readEnum()
            if let enumsmessageType = ImProto.MessageTypeId(rawValue:valueIntmessageType){
                 messageType = enumsmessageType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntmessageType))
            }

          case 32 :
            cmdId = try input.readInt32()

          case 42 :
            userId = try input.readString()

          case 50 :
            let subBuilder = ImProto.MapFieldEntry.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            reduns += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
