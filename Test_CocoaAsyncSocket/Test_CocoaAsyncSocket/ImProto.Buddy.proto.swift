// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Buddy.proto

import Foundation
import ProtocolBuffers


public extension ImProto{}

public func == (lhs: ImProto.BdyAddBuddyReq, rhs: ImProto.BdyAddBuddyReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUserInfo == rhs.hasUserInfo) && (!lhs.hasUserInfo || lhs.userInfo == rhs.userInfo)
  fieldCheck = fieldCheck && (lhs.hasAttachData == rhs.hasAttachData) && (!lhs.hasAttachData || lhs.attachData == rhs.attachData)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyAddBuddyRes, rhs: ImProto.BdyAddBuddyRes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFromUserId == rhs.hasFromUserId) && (!lhs.hasFromUserId || lhs.fromUserId == rhs.fromUserId)
  fieldCheck = fieldCheck && (lhs.hasIsAgree == rhs.hasIsAgree) && (!lhs.hasIsAgree || lhs.isAgree == rhs.isAgree)
  fieldCheck = fieldCheck && (lhs.hasAttachData == rhs.hasAttachData) && (!lhs.hasAttachData || lhs.attachData == rhs.attachData)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyDeleteBuddyReq, rhs: ImProto.BdyDeleteBuddyReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDeleteUserId == rhs.hasDeleteUserId) && (!lhs.hasDeleteUserId || lhs.deleteUserId == rhs.deleteUserId)
  fieldCheck = fieldCheck && (lhs.hasAttachData == rhs.hasAttachData) && (!lhs.hasAttachData || lhs.attachData == rhs.attachData)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyUsersInfoReq, rhs: ImProto.BdyUsersInfoReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.userIdList == rhs.userIdList)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyUsersInfoRes, rhs: ImProto.BdyUsersInfoRes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.userInfoList == rhs.userInfoList)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BuddyUsersStatReq, rhs: ImProto.BuddyUsersStatReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.userIdList == rhs.userIdList)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyUsersStatRes, rhs: ImProto.BdyUsersStatRes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.userStatList == rhs.userStatList)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyAvatarChangedNotify, rhs: ImProto.BdyAvatarChangedNotify) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasChangedUserId == rhs.hasChangedUserId) && (!lhs.hasChangedUserId || lhs.changedUserId == rhs.changedUserId)
  fieldCheck = fieldCheck && (lhs.hasAvatarUrl == rhs.hasAvatarUrl) && (!lhs.hasAvatarUrl || lhs.avatarUrl == rhs.avatarUrl)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyChangeSignInfoReq, rhs: ImProto.BdyChangeSignInfoReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSignInfo == rhs.hasSignInfo) && (!lhs.hasSignInfo || lhs.signInfo == rhs.signInfo)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyChangeSignInfoRes, rhs: ImProto.BdyChangeSignInfoRes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResultCode == rhs.hasResultCode) && (!lhs.hasResultCode || lhs.resultCode == rhs.resultCode)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdySignInfoChangedNotify, rhs: ImProto.BdySignInfoChangedNotify) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasChangedUserId == rhs.hasChangedUserId) && (!lhs.hasChangedUserId || lhs.changedUserId == rhs.changedUserId)
  fieldCheck = fieldCheck && (lhs.hasSignInfo == rhs.hasSignInfo) && (!lhs.hasSignInfo || lhs.signInfo == rhs.signInfo)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyListAck, rhs: ImProto.BdyListAck) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFromUserId == rhs.hasFromUserId) && (!lhs.hasFromUserId || lhs.fromUserId == rhs.fromUserId)
  fieldCheck = fieldCheck && (lhs.hasSerialNumber == rhs.hasSerialNumber) && (!lhs.hasSerialNumber || lhs.serialNumber == rhs.serialNumber)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.BdyChangeUserRemarkReq, rhs: ImProto.BdyChangeUserRemarkReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasChangedUserId == rhs.hasChangedUserId) && (!lhs.hasChangedUserId || lhs.changedUserId == rhs.changedUserId)
  fieldCheck = fieldCheck && (lhs.hasRemark == rhs.hasRemark) && (!lhs.hasRemark || lhs.remark == rhs.remark)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension ImProto {
  public struct BuddyRoot {
    public static var sharedInstance : BuddyRoot {
     struct Static {
         static let instance : BuddyRoot = BuddyRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ImProto.BaseDefineRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  //申请添加好友请求
  final public class BdyAddBuddyReq : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userInfo:ImProto.UserInfo!
    public private(set) var hasUserInfo:Bool = false
    public private(set) var attachData:NSData = NSData()

    public private(set) var hasAttachData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasUserInfo {
        return false
      }
      if !userInfo.isInitialized() {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUserInfo {
        try output.writeMessage(1, value:userInfo)
      }
      if hasAttachData {
        try output.writeData(20, value:attachData)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUserInfo {
          if let varSizeuserInfo = userInfo?.computeMessageSize(1) {
              serialize_size += varSizeuserInfo
          }
      }
      if hasAttachData {
        serialize_size += attachData.computeDataSize(20)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyAddBuddyReq> {
      var mergedArray = Array<ImProto.BdyAddBuddyReq>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyAddBuddyReq? {
      return try ImProto.BdyAddBuddyReq.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyAddBuddyReq {
      return try ImProto.BdyAddBuddyReq.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAddBuddyReq {
      return try ImProto.BdyAddBuddyReq.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyAddBuddyReq {
      return try ImProto.BdyAddBuddyReq.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAddBuddyReq {
      return try ImProto.BdyAddBuddyReq.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyAddBuddyReq {
      return try ImProto.BdyAddBuddyReq.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAddBuddyReq {
      return try ImProto.BdyAddBuddyReq.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyAddBuddyReq.Builder {
      return ImProto.BdyAddBuddyReq.classBuilder() as! ImProto.BdyAddBuddyReq.Builder
    }
    public func getBuilder() -> ImProto.BdyAddBuddyReq.Builder {
      return classBuilder() as! ImProto.BdyAddBuddyReq.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyAddBuddyReq.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyAddBuddyReq.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyAddBuddyReq.Builder {
      return try ImProto.BdyAddBuddyReq.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyAddBuddyReq) throws -> ImProto.BdyAddBuddyReq.Builder {
      return try ImProto.BdyAddBuddyReq.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasUserInfo {
        output += "\(indent) userInfo {\n"
        if let outDescUserInfo = userInfo {
          output += try outDescUserInfo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasAttachData {
        output += "\(indent) attachData: \(attachData) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserInfo {
                if let hashValueuserInfo = userInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuserInfo
                }
            }
            if hasAttachData {
               hashCode = (hashCode &* 31) &+ attachData.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyAddBuddyReq"
    }
    override public func className() -> String {
        return "ImProto.BdyAddBuddyReq"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyAddBuddyReq.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyAddBuddyReq = ImProto.BdyAddBuddyReq()
      public func getMessage() -> ImProto.BdyAddBuddyReq {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUserInfo:Bool {
           get {
               return builderResult.hasUserInfo
           }
      }
      public var userInfo:ImProto.UserInfo! {
           get {
               if userInfoBuilder_ != nil {
                  builderResult.userInfo = userInfoBuilder_.getMessage()
               }
               return builderResult.userInfo
           }
           set (value) {
               builderResult.hasUserInfo = true
               builderResult.userInfo = value
           }
      }
      private var userInfoBuilder_:ImProto.UserInfo.Builder! {
           didSet {
              builderResult.hasUserInfo = true
           }
      }
      public func getUserInfoBuilder() -> ImProto.UserInfo.Builder {
        if userInfoBuilder_ == nil {
           userInfoBuilder_ = ImProto.UserInfo.Builder()
           builderResult.userInfo = userInfoBuilder_.getMessage()
           if userInfo != nil {
              try! userInfoBuilder_.mergeFrom(userInfo)
           }
        }
        return userInfoBuilder_
      }
      public func setUserInfo(value:ImProto.UserInfo!) -> ImProto.BdyAddBuddyReq.Builder {
        self.userInfo = value
        return self
      }
      public func mergeUserInfo(value:ImProto.UserInfo) throws -> ImProto.BdyAddBuddyReq.Builder {
        if builderResult.hasUserInfo {
          builderResult.userInfo = try ImProto.UserInfo.builderWithPrototype(builderResult.userInfo).mergeFrom(value).buildPartial()
        } else {
          builderResult.userInfo = value
        }
        builderResult.hasUserInfo = true
        return self
      }
      public func clearUserInfo() -> ImProto.BdyAddBuddyReq.Builder {
        userInfoBuilder_ = nil
        builderResult.hasUserInfo = false
        builderResult.userInfo = nil
        return self
      }
      public var hasAttachData:Bool {
           get {
                return builderResult.hasAttachData
           }
      }
      public var attachData:NSData {
           get {
                return builderResult.attachData
           }
           set (value) {
               builderResult.hasAttachData = true
               builderResult.attachData = value
           }
      }
      public func setAttachData(value:NSData) -> ImProto.BdyAddBuddyReq.Builder {
        self.attachData = value
        return self
      }
      public func clearAttachData() -> ImProto.BdyAddBuddyReq.Builder{
           builderResult.hasAttachData = false
           builderResult.attachData = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyAddBuddyReq.Builder {
        builderResult = ImProto.BdyAddBuddyReq()
        return self
      }
      public override func clone() throws -> ImProto.BdyAddBuddyReq.Builder {
        return try ImProto.BdyAddBuddyReq.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyAddBuddyReq {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyAddBuddyReq {
        let returnMe:ImProto.BdyAddBuddyReq = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyAddBuddyReq) throws -> ImProto.BdyAddBuddyReq.Builder {
        if other == ImProto.BdyAddBuddyReq() {
         return self
        }
        if (other.hasUserInfo) {
            try mergeUserInfo(other.userInfo)
        }
        if other.hasAttachData {
             attachData = other.attachData
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyAddBuddyReq.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAddBuddyReq.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ImProto.UserInfo.Builder = ImProto.UserInfo.Builder()
            if hasUserInfo {
              try subBuilder.mergeFrom(userInfo)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            userInfo = subBuilder.buildPartial()

          case 162 :
            attachData = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //申请添加好友回执
  final public class BdyAddBuddyRes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var fromUserId:String = ""

    public private(set) var hasFromUserId:Bool = false
    //0：不同意 1：同意
    public private(set) var isAgree:String = ""

    public private(set) var hasIsAgree:Bool = false
    public private(set) var attachData:NSData = NSData()

    public private(set) var hasAttachData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasFromUserId {
        return false
      }
      if !hasIsAgree {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasFromUserId {
        try output.writeString(1, value:fromUserId)
      }
      if hasIsAgree {
        try output.writeString(2, value:isAgree)
      }
      if hasAttachData {
        try output.writeData(20, value:attachData)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFromUserId {
        serialize_size += fromUserId.computeStringSize(1)
      }
      if hasIsAgree {
        serialize_size += isAgree.computeStringSize(2)
      }
      if hasAttachData {
        serialize_size += attachData.computeDataSize(20)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyAddBuddyRes> {
      var mergedArray = Array<ImProto.BdyAddBuddyRes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyAddBuddyRes? {
      return try ImProto.BdyAddBuddyRes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyAddBuddyRes {
      return try ImProto.BdyAddBuddyRes.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAddBuddyRes {
      return try ImProto.BdyAddBuddyRes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyAddBuddyRes {
      return try ImProto.BdyAddBuddyRes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAddBuddyRes {
      return try ImProto.BdyAddBuddyRes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyAddBuddyRes {
      return try ImProto.BdyAddBuddyRes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAddBuddyRes {
      return try ImProto.BdyAddBuddyRes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyAddBuddyRes.Builder {
      return ImProto.BdyAddBuddyRes.classBuilder() as! ImProto.BdyAddBuddyRes.Builder
    }
    public func getBuilder() -> ImProto.BdyAddBuddyRes.Builder {
      return classBuilder() as! ImProto.BdyAddBuddyRes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyAddBuddyRes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyAddBuddyRes.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyAddBuddyRes.Builder {
      return try ImProto.BdyAddBuddyRes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyAddBuddyRes) throws -> ImProto.BdyAddBuddyRes.Builder {
      return try ImProto.BdyAddBuddyRes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasFromUserId {
        output += "\(indent) fromUserId: \(fromUserId) \n"
      }
      if hasIsAgree {
        output += "\(indent) isAgree: \(isAgree) \n"
      }
      if hasAttachData {
        output += "\(indent) attachData: \(attachData) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFromUserId {
               hashCode = (hashCode &* 31) &+ fromUserId.hashValue
            }
            if hasIsAgree {
               hashCode = (hashCode &* 31) &+ isAgree.hashValue
            }
            if hasAttachData {
               hashCode = (hashCode &* 31) &+ attachData.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyAddBuddyRes"
    }
    override public func className() -> String {
        return "ImProto.BdyAddBuddyRes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyAddBuddyRes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyAddBuddyRes = ImProto.BdyAddBuddyRes()
      public func getMessage() -> ImProto.BdyAddBuddyRes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFromUserId:Bool {
           get {
                return builderResult.hasFromUserId
           }
      }
      public var fromUserId:String {
           get {
                return builderResult.fromUserId
           }
           set (value) {
               builderResult.hasFromUserId = true
               builderResult.fromUserId = value
           }
      }
      public func setFromUserId(value:String) -> ImProto.BdyAddBuddyRes.Builder {
        self.fromUserId = value
        return self
      }
      public func clearFromUserId() -> ImProto.BdyAddBuddyRes.Builder{
           builderResult.hasFromUserId = false
           builderResult.fromUserId = ""
           return self
      }
      public var hasIsAgree:Bool {
           get {
                return builderResult.hasIsAgree
           }
      }
      public var isAgree:String {
           get {
                return builderResult.isAgree
           }
           set (value) {
               builderResult.hasIsAgree = true
               builderResult.isAgree = value
           }
      }
      public func setIsAgree(value:String) -> ImProto.BdyAddBuddyRes.Builder {
        self.isAgree = value
        return self
      }
      public func clearIsAgree() -> ImProto.BdyAddBuddyRes.Builder{
           builderResult.hasIsAgree = false
           builderResult.isAgree = ""
           return self
      }
      public var hasAttachData:Bool {
           get {
                return builderResult.hasAttachData
           }
      }
      public var attachData:NSData {
           get {
                return builderResult.attachData
           }
           set (value) {
               builderResult.hasAttachData = true
               builderResult.attachData = value
           }
      }
      public func setAttachData(value:NSData) -> ImProto.BdyAddBuddyRes.Builder {
        self.attachData = value
        return self
      }
      public func clearAttachData() -> ImProto.BdyAddBuddyRes.Builder{
           builderResult.hasAttachData = false
           builderResult.attachData = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyAddBuddyRes.Builder {
        builderResult = ImProto.BdyAddBuddyRes()
        return self
      }
      public override func clone() throws -> ImProto.BdyAddBuddyRes.Builder {
        return try ImProto.BdyAddBuddyRes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyAddBuddyRes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyAddBuddyRes {
        let returnMe:ImProto.BdyAddBuddyRes = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyAddBuddyRes) throws -> ImProto.BdyAddBuddyRes.Builder {
        if other == ImProto.BdyAddBuddyRes() {
         return self
        }
        if other.hasFromUserId {
             fromUserId = other.fromUserId
        }
        if other.hasIsAgree {
             isAgree = other.isAgree
        }
        if other.hasAttachData {
             attachData = other.attachData
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyAddBuddyRes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAddBuddyRes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            fromUserId = try input.readString()

          case 18 :
            isAgree = try input.readString()

          case 162 :
            attachData = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //删除好友
  final public class BdyDeleteBuddyReq : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var deleteUserId:String = ""

    public private(set) var hasDeleteUserId:Bool = false
    public private(set) var attachData:NSData = NSData()

    public private(set) var hasAttachData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasDeleteUserId {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasDeleteUserId {
        try output.writeString(1, value:deleteUserId)
      }
      if hasAttachData {
        try output.writeData(20, value:attachData)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDeleteUserId {
        serialize_size += deleteUserId.computeStringSize(1)
      }
      if hasAttachData {
        serialize_size += attachData.computeDataSize(20)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyDeleteBuddyReq> {
      var mergedArray = Array<ImProto.BdyDeleteBuddyReq>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyDeleteBuddyReq? {
      return try ImProto.BdyDeleteBuddyReq.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyDeleteBuddyReq {
      return try ImProto.BdyDeleteBuddyReq.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyDeleteBuddyReq {
      return try ImProto.BdyDeleteBuddyReq.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyDeleteBuddyReq {
      return try ImProto.BdyDeleteBuddyReq.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyDeleteBuddyReq {
      return try ImProto.BdyDeleteBuddyReq.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyDeleteBuddyReq {
      return try ImProto.BdyDeleteBuddyReq.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyDeleteBuddyReq {
      return try ImProto.BdyDeleteBuddyReq.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyDeleteBuddyReq.Builder {
      return ImProto.BdyDeleteBuddyReq.classBuilder() as! ImProto.BdyDeleteBuddyReq.Builder
    }
    public func getBuilder() -> ImProto.BdyDeleteBuddyReq.Builder {
      return classBuilder() as! ImProto.BdyDeleteBuddyReq.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyDeleteBuddyReq.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyDeleteBuddyReq.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyDeleteBuddyReq.Builder {
      return try ImProto.BdyDeleteBuddyReq.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyDeleteBuddyReq) throws -> ImProto.BdyDeleteBuddyReq.Builder {
      return try ImProto.BdyDeleteBuddyReq.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasDeleteUserId {
        output += "\(indent) deleteUserId: \(deleteUserId) \n"
      }
      if hasAttachData {
        output += "\(indent) attachData: \(attachData) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDeleteUserId {
               hashCode = (hashCode &* 31) &+ deleteUserId.hashValue
            }
            if hasAttachData {
               hashCode = (hashCode &* 31) &+ attachData.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyDeleteBuddyReq"
    }
    override public func className() -> String {
        return "ImProto.BdyDeleteBuddyReq"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyDeleteBuddyReq.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyDeleteBuddyReq = ImProto.BdyDeleteBuddyReq()
      public func getMessage() -> ImProto.BdyDeleteBuddyReq {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasDeleteUserId:Bool {
           get {
                return builderResult.hasDeleteUserId
           }
      }
      public var deleteUserId:String {
           get {
                return builderResult.deleteUserId
           }
           set (value) {
               builderResult.hasDeleteUserId = true
               builderResult.deleteUserId = value
           }
      }
      public func setDeleteUserId(value:String) -> ImProto.BdyDeleteBuddyReq.Builder {
        self.deleteUserId = value
        return self
      }
      public func clearDeleteUserId() -> ImProto.BdyDeleteBuddyReq.Builder{
           builderResult.hasDeleteUserId = false
           builderResult.deleteUserId = ""
           return self
      }
      public var hasAttachData:Bool {
           get {
                return builderResult.hasAttachData
           }
      }
      public var attachData:NSData {
           get {
                return builderResult.attachData
           }
           set (value) {
               builderResult.hasAttachData = true
               builderResult.attachData = value
           }
      }
      public func setAttachData(value:NSData) -> ImProto.BdyDeleteBuddyReq.Builder {
        self.attachData = value
        return self
      }
      public func clearAttachData() -> ImProto.BdyDeleteBuddyReq.Builder{
           builderResult.hasAttachData = false
           builderResult.attachData = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyDeleteBuddyReq.Builder {
        builderResult = ImProto.BdyDeleteBuddyReq()
        return self
      }
      public override func clone() throws -> ImProto.BdyDeleteBuddyReq.Builder {
        return try ImProto.BdyDeleteBuddyReq.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyDeleteBuddyReq {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyDeleteBuddyReq {
        let returnMe:ImProto.BdyDeleteBuddyReq = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyDeleteBuddyReq) throws -> ImProto.BdyDeleteBuddyReq.Builder {
        if other == ImProto.BdyDeleteBuddyReq() {
         return self
        }
        if other.hasDeleteUserId {
             deleteUserId = other.deleteUserId
        }
        if other.hasAttachData {
             attachData = other.attachData
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyDeleteBuddyReq.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyDeleteBuddyReq.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            deleteUserId = try input.readString()

          case 162 :
            attachData = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //请求用户信息
  final public class BdyUsersInfoReq : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userIdList:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !userIdList.isEmpty {
        for oneValueuserIdList in userIdList {
          try output.writeString(1, value:oneValueuserIdList)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeUserIdList:Int32 = 0
      for oneValueuserIdList in userIdList {
          dataSizeUserIdList += oneValueuserIdList.computeStringSizeNoTag()
      }
      serialize_size += dataSizeUserIdList
      serialize_size += 1 * Int32(userIdList.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyUsersInfoReq> {
      var mergedArray = Array<ImProto.BdyUsersInfoReq>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyUsersInfoReq? {
      return try ImProto.BdyUsersInfoReq.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyUsersInfoReq {
      return try ImProto.BdyUsersInfoReq.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersInfoReq {
      return try ImProto.BdyUsersInfoReq.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyUsersInfoReq {
      return try ImProto.BdyUsersInfoReq.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersInfoReq {
      return try ImProto.BdyUsersInfoReq.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyUsersInfoReq {
      return try ImProto.BdyUsersInfoReq.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersInfoReq {
      return try ImProto.BdyUsersInfoReq.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyUsersInfoReq.Builder {
      return ImProto.BdyUsersInfoReq.classBuilder() as! ImProto.BdyUsersInfoReq.Builder
    }
    public func getBuilder() -> ImProto.BdyUsersInfoReq.Builder {
      return classBuilder() as! ImProto.BdyUsersInfoReq.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyUsersInfoReq.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyUsersInfoReq.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyUsersInfoReq.Builder {
      return try ImProto.BdyUsersInfoReq.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyUsersInfoReq) throws -> ImProto.BdyUsersInfoReq.Builder {
      return try ImProto.BdyUsersInfoReq.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      var userIdListElementIndex:Int = 0
      for oneValueuserIdList in userIdList  {
          output += "\(indent) userIdList[\(userIdListElementIndex)]: \(oneValueuserIdList)\n"
          userIdListElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueuserIdList in userIdList {
                hashCode = (hashCode &* 31) &+ oneValueuserIdList.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyUsersInfoReq"
    }
    override public func className() -> String {
        return "ImProto.BdyUsersInfoReq"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyUsersInfoReq.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyUsersInfoReq = ImProto.BdyUsersInfoReq()
      public func getMessage() -> ImProto.BdyUsersInfoReq {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var userIdList:Array<String> {
           get {
               return builderResult.userIdList
           }
           set (array) {
               builderResult.userIdList = array
           }
      }
      public func setUserIdList(value:Array<String>) -> ImProto.BdyUsersInfoReq.Builder {
        self.userIdList = value
        return self
      }
      public func clearUserIdList() -> ImProto.BdyUsersInfoReq.Builder {
         builderResult.userIdList.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyUsersInfoReq.Builder {
        builderResult = ImProto.BdyUsersInfoReq()
        return self
      }
      public override func clone() throws -> ImProto.BdyUsersInfoReq.Builder {
        return try ImProto.BdyUsersInfoReq.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyUsersInfoReq {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyUsersInfoReq {
        let returnMe:ImProto.BdyUsersInfoReq = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyUsersInfoReq) throws -> ImProto.BdyUsersInfoReq.Builder {
        if other == ImProto.BdyUsersInfoReq() {
         return self
        }
        if !other.userIdList.isEmpty {
            builderResult.userIdList += other.userIdList
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyUsersInfoReq.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersInfoReq.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            userIdList += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //请求用户信息回执
  final public class BdyUsersInfoRes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userInfoList:Array<ImProto.UserInfo>  = Array<ImProto.UserInfo>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      var isInituserInfoList:Bool = true
      for oneElementuserInfoList in userInfoList {
          if (!oneElementuserInfoList.isInitialized()) {
              isInituserInfoList = false
              break 
          }
      }
      if !isInituserInfoList {
       return isInituserInfoList
       }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementuserInfoList in userInfoList {
          try output.writeMessage(1, value:oneElementuserInfoList)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementuserInfoList in userInfoList {
          serialize_size += oneElementuserInfoList.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyUsersInfoRes> {
      var mergedArray = Array<ImProto.BdyUsersInfoRes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyUsersInfoRes? {
      return try ImProto.BdyUsersInfoRes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyUsersInfoRes {
      return try ImProto.BdyUsersInfoRes.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersInfoRes {
      return try ImProto.BdyUsersInfoRes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyUsersInfoRes {
      return try ImProto.BdyUsersInfoRes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersInfoRes {
      return try ImProto.BdyUsersInfoRes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyUsersInfoRes {
      return try ImProto.BdyUsersInfoRes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersInfoRes {
      return try ImProto.BdyUsersInfoRes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyUsersInfoRes.Builder {
      return ImProto.BdyUsersInfoRes.classBuilder() as! ImProto.BdyUsersInfoRes.Builder
    }
    public func getBuilder() -> ImProto.BdyUsersInfoRes.Builder {
      return classBuilder() as! ImProto.BdyUsersInfoRes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyUsersInfoRes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyUsersInfoRes.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyUsersInfoRes.Builder {
      return try ImProto.BdyUsersInfoRes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyUsersInfoRes) throws -> ImProto.BdyUsersInfoRes.Builder {
      return try ImProto.BdyUsersInfoRes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      var userInfoListElementIndex:Int = 0
      for oneElementuserInfoList in userInfoList {
          output += "\(indent) userInfoList[\(userInfoListElementIndex)] {\n"
          output += try oneElementuserInfoList.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          userInfoListElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementuserInfoList in userInfoList {
                hashCode = (hashCode &* 31) &+ oneElementuserInfoList.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyUsersInfoRes"
    }
    override public func className() -> String {
        return "ImProto.BdyUsersInfoRes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyUsersInfoRes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyUsersInfoRes = ImProto.BdyUsersInfoRes()
      public func getMessage() -> ImProto.BdyUsersInfoRes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var userInfoList:Array<ImProto.UserInfo> {
           get {
               return builderResult.userInfoList
           }
           set (value) {
               builderResult.userInfoList = value
           }
      }
      public func setUserInfoList(value:Array<ImProto.UserInfo>) -> ImProto.BdyUsersInfoRes.Builder {
        self.userInfoList = value
        return self
      }
      public func clearUserInfoList() -> ImProto.BdyUsersInfoRes.Builder {
        builderResult.userInfoList.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyUsersInfoRes.Builder {
        builderResult = ImProto.BdyUsersInfoRes()
        return self
      }
      public override func clone() throws -> ImProto.BdyUsersInfoRes.Builder {
        return try ImProto.BdyUsersInfoRes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyUsersInfoRes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyUsersInfoRes {
        let returnMe:ImProto.BdyUsersInfoRes = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyUsersInfoRes) throws -> ImProto.BdyUsersInfoRes.Builder {
        if other == ImProto.BdyUsersInfoRes() {
         return self
        }
        if !other.userInfoList.isEmpty  {
           builderResult.userInfoList += other.userInfoList
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyUsersInfoRes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersInfoRes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = ImProto.UserInfo.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            userInfoList += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //获取用户状态请求
  final public class BuddyUsersStatReq : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userIdList:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !userIdList.isEmpty {
        for oneValueuserIdList in userIdList {
          try output.writeString(1, value:oneValueuserIdList)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeUserIdList:Int32 = 0
      for oneValueuserIdList in userIdList {
          dataSizeUserIdList += oneValueuserIdList.computeStringSizeNoTag()
      }
      serialize_size += dataSizeUserIdList
      serialize_size += 1 * Int32(userIdList.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BuddyUsersStatReq> {
      var mergedArray = Array<ImProto.BuddyUsersStatReq>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BuddyUsersStatReq? {
      return try ImProto.BuddyUsersStatReq.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BuddyUsersStatReq {
      return try ImProto.BuddyUsersStatReq.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BuddyUsersStatReq {
      return try ImProto.BuddyUsersStatReq.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BuddyUsersStatReq {
      return try ImProto.BuddyUsersStatReq.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BuddyUsersStatReq {
      return try ImProto.BuddyUsersStatReq.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BuddyUsersStatReq {
      return try ImProto.BuddyUsersStatReq.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BuddyUsersStatReq {
      return try ImProto.BuddyUsersStatReq.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BuddyUsersStatReq.Builder {
      return ImProto.BuddyUsersStatReq.classBuilder() as! ImProto.BuddyUsersStatReq.Builder
    }
    public func getBuilder() -> ImProto.BuddyUsersStatReq.Builder {
      return classBuilder() as! ImProto.BuddyUsersStatReq.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BuddyUsersStatReq.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BuddyUsersStatReq.Builder()
    }
    public func toBuilder() throws -> ImProto.BuddyUsersStatReq.Builder {
      return try ImProto.BuddyUsersStatReq.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BuddyUsersStatReq) throws -> ImProto.BuddyUsersStatReq.Builder {
      return try ImProto.BuddyUsersStatReq.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      var userIdListElementIndex:Int = 0
      for oneValueuserIdList in userIdList  {
          output += "\(indent) userIdList[\(userIdListElementIndex)]: \(oneValueuserIdList)\n"
          userIdListElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueuserIdList in userIdList {
                hashCode = (hashCode &* 31) &+ oneValueuserIdList.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BuddyUsersStatReq"
    }
    override public func className() -> String {
        return "ImProto.BuddyUsersStatReq"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BuddyUsersStatReq.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BuddyUsersStatReq = ImProto.BuddyUsersStatReq()
      public func getMessage() -> ImProto.BuddyUsersStatReq {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var userIdList:Array<String> {
           get {
               return builderResult.userIdList
           }
           set (array) {
               builderResult.userIdList = array
           }
      }
      public func setUserIdList(value:Array<String>) -> ImProto.BuddyUsersStatReq.Builder {
        self.userIdList = value
        return self
      }
      public func clearUserIdList() -> ImProto.BuddyUsersStatReq.Builder {
         builderResult.userIdList.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BuddyUsersStatReq.Builder {
        builderResult = ImProto.BuddyUsersStatReq()
        return self
      }
      public override func clone() throws -> ImProto.BuddyUsersStatReq.Builder {
        return try ImProto.BuddyUsersStatReq.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BuddyUsersStatReq {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BuddyUsersStatReq {
        let returnMe:ImProto.BuddyUsersStatReq = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BuddyUsersStatReq) throws -> ImProto.BuddyUsersStatReq.Builder {
        if other == ImProto.BuddyUsersStatReq() {
         return self
        }
        if !other.userIdList.isEmpty {
            builderResult.userIdList += other.userIdList
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BuddyUsersStatReq.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BuddyUsersStatReq.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            userIdList += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //获取用户状态回执
  final public class BdyUsersStatRes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userStatList:Array<ImProto.UserStat>  = Array<ImProto.UserStat>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      var isInituserStatList:Bool = true
      for oneElementuserStatList in userStatList {
          if (!oneElementuserStatList.isInitialized()) {
              isInituserStatList = false
              break 
          }
      }
      if !isInituserStatList {
       return isInituserStatList
       }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementuserStatList in userStatList {
          try output.writeMessage(1, value:oneElementuserStatList)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementuserStatList in userStatList {
          serialize_size += oneElementuserStatList.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyUsersStatRes> {
      var mergedArray = Array<ImProto.BdyUsersStatRes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyUsersStatRes? {
      return try ImProto.BdyUsersStatRes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyUsersStatRes {
      return try ImProto.BdyUsersStatRes.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersStatRes {
      return try ImProto.BdyUsersStatRes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyUsersStatRes {
      return try ImProto.BdyUsersStatRes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersStatRes {
      return try ImProto.BdyUsersStatRes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyUsersStatRes {
      return try ImProto.BdyUsersStatRes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersStatRes {
      return try ImProto.BdyUsersStatRes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyUsersStatRes.Builder {
      return ImProto.BdyUsersStatRes.classBuilder() as! ImProto.BdyUsersStatRes.Builder
    }
    public func getBuilder() -> ImProto.BdyUsersStatRes.Builder {
      return classBuilder() as! ImProto.BdyUsersStatRes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyUsersStatRes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyUsersStatRes.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyUsersStatRes.Builder {
      return try ImProto.BdyUsersStatRes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyUsersStatRes) throws -> ImProto.BdyUsersStatRes.Builder {
      return try ImProto.BdyUsersStatRes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      var userStatListElementIndex:Int = 0
      for oneElementuserStatList in userStatList {
          output += "\(indent) userStatList[\(userStatListElementIndex)] {\n"
          output += try oneElementuserStatList.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          userStatListElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementuserStatList in userStatList {
                hashCode = (hashCode &* 31) &+ oneElementuserStatList.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyUsersStatRes"
    }
    override public func className() -> String {
        return "ImProto.BdyUsersStatRes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyUsersStatRes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyUsersStatRes = ImProto.BdyUsersStatRes()
      public func getMessage() -> ImProto.BdyUsersStatRes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var userStatList:Array<ImProto.UserStat> {
           get {
               return builderResult.userStatList
           }
           set (value) {
               builderResult.userStatList = value
           }
      }
      public func setUserStatList(value:Array<ImProto.UserStat>) -> ImProto.BdyUsersStatRes.Builder {
        self.userStatList = value
        return self
      }
      public func clearUserStatList() -> ImProto.BdyUsersStatRes.Builder {
        builderResult.userStatList.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyUsersStatRes.Builder {
        builderResult = ImProto.BdyUsersStatRes()
        return self
      }
      public override func clone() throws -> ImProto.BdyUsersStatRes.Builder {
        return try ImProto.BdyUsersStatRes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyUsersStatRes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyUsersStatRes {
        let returnMe:ImProto.BdyUsersStatRes = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyUsersStatRes) throws -> ImProto.BdyUsersStatRes.Builder {
        if other == ImProto.BdyUsersStatRes() {
         return self
        }
        if !other.userStatList.isEmpty  {
           builderResult.userStatList += other.userStatList
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyUsersStatRes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyUsersStatRes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = ImProto.UserStat.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            userStatList += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //头像更改通知
  final public class BdyAvatarChangedNotify : GeneratedMessage, GeneratedMessageProtocol {
    // 谁修改了avatar
    public private(set) var changedUserId:String = ""

    public private(set) var hasChangedUserId:Bool = false
    public private(set) var avatarUrl:String = ""

    public private(set) var hasAvatarUrl:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasChangedUserId {
        return false
      }
      if !hasAvatarUrl {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasChangedUserId {
        try output.writeString(1, value:changedUserId)
      }
      if hasAvatarUrl {
        try output.writeString(2, value:avatarUrl)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasChangedUserId {
        serialize_size += changedUserId.computeStringSize(1)
      }
      if hasAvatarUrl {
        serialize_size += avatarUrl.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyAvatarChangedNotify> {
      var mergedArray = Array<ImProto.BdyAvatarChangedNotify>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyAvatarChangedNotify? {
      return try ImProto.BdyAvatarChangedNotify.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyAvatarChangedNotify {
      return try ImProto.BdyAvatarChangedNotify.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAvatarChangedNotify {
      return try ImProto.BdyAvatarChangedNotify.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyAvatarChangedNotify {
      return try ImProto.BdyAvatarChangedNotify.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAvatarChangedNotify {
      return try ImProto.BdyAvatarChangedNotify.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyAvatarChangedNotify {
      return try ImProto.BdyAvatarChangedNotify.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAvatarChangedNotify {
      return try ImProto.BdyAvatarChangedNotify.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyAvatarChangedNotify.Builder {
      return ImProto.BdyAvatarChangedNotify.classBuilder() as! ImProto.BdyAvatarChangedNotify.Builder
    }
    public func getBuilder() -> ImProto.BdyAvatarChangedNotify.Builder {
      return classBuilder() as! ImProto.BdyAvatarChangedNotify.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyAvatarChangedNotify.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyAvatarChangedNotify.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyAvatarChangedNotify.Builder {
      return try ImProto.BdyAvatarChangedNotify.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyAvatarChangedNotify) throws -> ImProto.BdyAvatarChangedNotify.Builder {
      return try ImProto.BdyAvatarChangedNotify.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasChangedUserId {
        output += "\(indent) changedUserId: \(changedUserId) \n"
      }
      if hasAvatarUrl {
        output += "\(indent) avatarUrl: \(avatarUrl) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasChangedUserId {
               hashCode = (hashCode &* 31) &+ changedUserId.hashValue
            }
            if hasAvatarUrl {
               hashCode = (hashCode &* 31) &+ avatarUrl.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyAvatarChangedNotify"
    }
    override public func className() -> String {
        return "ImProto.BdyAvatarChangedNotify"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyAvatarChangedNotify.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyAvatarChangedNotify = ImProto.BdyAvatarChangedNotify()
      public func getMessage() -> ImProto.BdyAvatarChangedNotify {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasChangedUserId:Bool {
           get {
                return builderResult.hasChangedUserId
           }
      }
      public var changedUserId:String {
           get {
                return builderResult.changedUserId
           }
           set (value) {
               builderResult.hasChangedUserId = true
               builderResult.changedUserId = value
           }
      }
      public func setChangedUserId(value:String) -> ImProto.BdyAvatarChangedNotify.Builder {
        self.changedUserId = value
        return self
      }
      public func clearChangedUserId() -> ImProto.BdyAvatarChangedNotify.Builder{
           builderResult.hasChangedUserId = false
           builderResult.changedUserId = ""
           return self
      }
      public var hasAvatarUrl:Bool {
           get {
                return builderResult.hasAvatarUrl
           }
      }
      public var avatarUrl:String {
           get {
                return builderResult.avatarUrl
           }
           set (value) {
               builderResult.hasAvatarUrl = true
               builderResult.avatarUrl = value
           }
      }
      public func setAvatarUrl(value:String) -> ImProto.BdyAvatarChangedNotify.Builder {
        self.avatarUrl = value
        return self
      }
      public func clearAvatarUrl() -> ImProto.BdyAvatarChangedNotify.Builder{
           builderResult.hasAvatarUrl = false
           builderResult.avatarUrl = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyAvatarChangedNotify.Builder {
        builderResult = ImProto.BdyAvatarChangedNotify()
        return self
      }
      public override func clone() throws -> ImProto.BdyAvatarChangedNotify.Builder {
        return try ImProto.BdyAvatarChangedNotify.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyAvatarChangedNotify {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyAvatarChangedNotify {
        let returnMe:ImProto.BdyAvatarChangedNotify = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyAvatarChangedNotify) throws -> ImProto.BdyAvatarChangedNotify.Builder {
        if other == ImProto.BdyAvatarChangedNotify() {
         return self
        }
        if other.hasChangedUserId {
             changedUserId = other.changedUserId
        }
        if other.hasAvatarUrl {
             avatarUrl = other.avatarUrl
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyAvatarChangedNotify.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyAvatarChangedNotify.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            changedUserId = try input.readString()

          case 18 :
            avatarUrl = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //修改个性签名请求
  final public class BdyChangeSignInfoReq : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var signInfo:String = ""

    public private(set) var hasSignInfo:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasSignInfo {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSignInfo {
        try output.writeString(1, value:signInfo)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSignInfo {
        serialize_size += signInfo.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyChangeSignInfoReq> {
      var mergedArray = Array<ImProto.BdyChangeSignInfoReq>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyChangeSignInfoReq? {
      return try ImProto.BdyChangeSignInfoReq.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyChangeSignInfoReq {
      return try ImProto.BdyChangeSignInfoReq.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeSignInfoReq {
      return try ImProto.BdyChangeSignInfoReq.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyChangeSignInfoReq {
      return try ImProto.BdyChangeSignInfoReq.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeSignInfoReq {
      return try ImProto.BdyChangeSignInfoReq.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyChangeSignInfoReq {
      return try ImProto.BdyChangeSignInfoReq.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeSignInfoReq {
      return try ImProto.BdyChangeSignInfoReq.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyChangeSignInfoReq.Builder {
      return ImProto.BdyChangeSignInfoReq.classBuilder() as! ImProto.BdyChangeSignInfoReq.Builder
    }
    public func getBuilder() -> ImProto.BdyChangeSignInfoReq.Builder {
      return classBuilder() as! ImProto.BdyChangeSignInfoReq.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyChangeSignInfoReq.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyChangeSignInfoReq.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyChangeSignInfoReq.Builder {
      return try ImProto.BdyChangeSignInfoReq.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyChangeSignInfoReq) throws -> ImProto.BdyChangeSignInfoReq.Builder {
      return try ImProto.BdyChangeSignInfoReq.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasSignInfo {
        output += "\(indent) signInfo: \(signInfo) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSignInfo {
               hashCode = (hashCode &* 31) &+ signInfo.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyChangeSignInfoReq"
    }
    override public func className() -> String {
        return "ImProto.BdyChangeSignInfoReq"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyChangeSignInfoReq.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyChangeSignInfoReq = ImProto.BdyChangeSignInfoReq()
      public func getMessage() -> ImProto.BdyChangeSignInfoReq {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSignInfo:Bool {
           get {
                return builderResult.hasSignInfo
           }
      }
      public var signInfo:String {
           get {
                return builderResult.signInfo
           }
           set (value) {
               builderResult.hasSignInfo = true
               builderResult.signInfo = value
           }
      }
      public func setSignInfo(value:String) -> ImProto.BdyChangeSignInfoReq.Builder {
        self.signInfo = value
        return self
      }
      public func clearSignInfo() -> ImProto.BdyChangeSignInfoReq.Builder{
           builderResult.hasSignInfo = false
           builderResult.signInfo = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyChangeSignInfoReq.Builder {
        builderResult = ImProto.BdyChangeSignInfoReq()
        return self
      }
      public override func clone() throws -> ImProto.BdyChangeSignInfoReq.Builder {
        return try ImProto.BdyChangeSignInfoReq.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyChangeSignInfoReq {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyChangeSignInfoReq {
        let returnMe:ImProto.BdyChangeSignInfoReq = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyChangeSignInfoReq) throws -> ImProto.BdyChangeSignInfoReq.Builder {
        if other == ImProto.BdyChangeSignInfoReq() {
         return self
        }
        if other.hasSignInfo {
             signInfo = other.signInfo
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyChangeSignInfoReq.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeSignInfoReq.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            signInfo = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //修改个性签名回执
  final public class BdyChangeSignInfoRes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var resultCode:UInt32 = UInt32(0)

    public private(set) var hasResultCode:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasResultCode {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResultCode {
        try output.writeUInt32(1, value:resultCode)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasResultCode {
        serialize_size += resultCode.computeUInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyChangeSignInfoRes> {
      var mergedArray = Array<ImProto.BdyChangeSignInfoRes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyChangeSignInfoRes? {
      return try ImProto.BdyChangeSignInfoRes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyChangeSignInfoRes {
      return try ImProto.BdyChangeSignInfoRes.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeSignInfoRes {
      return try ImProto.BdyChangeSignInfoRes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyChangeSignInfoRes {
      return try ImProto.BdyChangeSignInfoRes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeSignInfoRes {
      return try ImProto.BdyChangeSignInfoRes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyChangeSignInfoRes {
      return try ImProto.BdyChangeSignInfoRes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeSignInfoRes {
      return try ImProto.BdyChangeSignInfoRes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyChangeSignInfoRes.Builder {
      return ImProto.BdyChangeSignInfoRes.classBuilder() as! ImProto.BdyChangeSignInfoRes.Builder
    }
    public func getBuilder() -> ImProto.BdyChangeSignInfoRes.Builder {
      return classBuilder() as! ImProto.BdyChangeSignInfoRes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyChangeSignInfoRes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyChangeSignInfoRes.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyChangeSignInfoRes.Builder {
      return try ImProto.BdyChangeSignInfoRes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyChangeSignInfoRes) throws -> ImProto.BdyChangeSignInfoRes.Builder {
      return try ImProto.BdyChangeSignInfoRes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasResultCode {
        output += "\(indent) resultCode: \(resultCode) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResultCode {
               hashCode = (hashCode &* 31) &+ resultCode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyChangeSignInfoRes"
    }
    override public func className() -> String {
        return "ImProto.BdyChangeSignInfoRes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyChangeSignInfoRes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyChangeSignInfoRes = ImProto.BdyChangeSignInfoRes()
      public func getMessage() -> ImProto.BdyChangeSignInfoRes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasResultCode:Bool {
           get {
                return builderResult.hasResultCode
           }
      }
      public var resultCode:UInt32 {
           get {
                return builderResult.resultCode
           }
           set (value) {
               builderResult.hasResultCode = true
               builderResult.resultCode = value
           }
      }
      public func setResultCode(value:UInt32) -> ImProto.BdyChangeSignInfoRes.Builder {
        self.resultCode = value
        return self
      }
      public func clearResultCode() -> ImProto.BdyChangeSignInfoRes.Builder{
           builderResult.hasResultCode = false
           builderResult.resultCode = UInt32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyChangeSignInfoRes.Builder {
        builderResult = ImProto.BdyChangeSignInfoRes()
        return self
      }
      public override func clone() throws -> ImProto.BdyChangeSignInfoRes.Builder {
        return try ImProto.BdyChangeSignInfoRes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyChangeSignInfoRes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyChangeSignInfoRes {
        let returnMe:ImProto.BdyChangeSignInfoRes = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyChangeSignInfoRes) throws -> ImProto.BdyChangeSignInfoRes.Builder {
        if other == ImProto.BdyChangeSignInfoRes() {
         return self
        }
        if other.hasResultCode {
             resultCode = other.resultCode
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyChangeSignInfoRes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeSignInfoRes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            resultCode = try input.readUInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // 个性签名修改通知（广播）
  final public class BdySignInfoChangedNotify : GeneratedMessage, GeneratedMessageProtocol {
    // 谁修改了个性签名
    public private(set) var changedUserId:String = ""

    public private(set) var hasChangedUserId:Bool = false
    public private(set) var signInfo:String = ""

    public private(set) var hasSignInfo:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasChangedUserId {
        return false
      }
      if !hasSignInfo {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasChangedUserId {
        try output.writeString(1, value:changedUserId)
      }
      if hasSignInfo {
        try output.writeString(2, value:signInfo)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasChangedUserId {
        serialize_size += changedUserId.computeStringSize(1)
      }
      if hasSignInfo {
        serialize_size += signInfo.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdySignInfoChangedNotify> {
      var mergedArray = Array<ImProto.BdySignInfoChangedNotify>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdySignInfoChangedNotify? {
      return try ImProto.BdySignInfoChangedNotify.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdySignInfoChangedNotify {
      return try ImProto.BdySignInfoChangedNotify.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdySignInfoChangedNotify {
      return try ImProto.BdySignInfoChangedNotify.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdySignInfoChangedNotify {
      return try ImProto.BdySignInfoChangedNotify.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdySignInfoChangedNotify {
      return try ImProto.BdySignInfoChangedNotify.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdySignInfoChangedNotify {
      return try ImProto.BdySignInfoChangedNotify.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdySignInfoChangedNotify {
      return try ImProto.BdySignInfoChangedNotify.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdySignInfoChangedNotify.Builder {
      return ImProto.BdySignInfoChangedNotify.classBuilder() as! ImProto.BdySignInfoChangedNotify.Builder
    }
    public func getBuilder() -> ImProto.BdySignInfoChangedNotify.Builder {
      return classBuilder() as! ImProto.BdySignInfoChangedNotify.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdySignInfoChangedNotify.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdySignInfoChangedNotify.Builder()
    }
    public func toBuilder() throws -> ImProto.BdySignInfoChangedNotify.Builder {
      return try ImProto.BdySignInfoChangedNotify.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdySignInfoChangedNotify) throws -> ImProto.BdySignInfoChangedNotify.Builder {
      return try ImProto.BdySignInfoChangedNotify.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasChangedUserId {
        output += "\(indent) changedUserId: \(changedUserId) \n"
      }
      if hasSignInfo {
        output += "\(indent) signInfo: \(signInfo) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasChangedUserId {
               hashCode = (hashCode &* 31) &+ changedUserId.hashValue
            }
            if hasSignInfo {
               hashCode = (hashCode &* 31) &+ signInfo.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdySignInfoChangedNotify"
    }
    override public func className() -> String {
        return "ImProto.BdySignInfoChangedNotify"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdySignInfoChangedNotify.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdySignInfoChangedNotify = ImProto.BdySignInfoChangedNotify()
      public func getMessage() -> ImProto.BdySignInfoChangedNotify {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasChangedUserId:Bool {
           get {
                return builderResult.hasChangedUserId
           }
      }
      public var changedUserId:String {
           get {
                return builderResult.changedUserId
           }
           set (value) {
               builderResult.hasChangedUserId = true
               builderResult.changedUserId = value
           }
      }
      public func setChangedUserId(value:String) -> ImProto.BdySignInfoChangedNotify.Builder {
        self.changedUserId = value
        return self
      }
      public func clearChangedUserId() -> ImProto.BdySignInfoChangedNotify.Builder{
           builderResult.hasChangedUserId = false
           builderResult.changedUserId = ""
           return self
      }
      public var hasSignInfo:Bool {
           get {
                return builderResult.hasSignInfo
           }
      }
      public var signInfo:String {
           get {
                return builderResult.signInfo
           }
           set (value) {
               builderResult.hasSignInfo = true
               builderResult.signInfo = value
           }
      }
      public func setSignInfo(value:String) -> ImProto.BdySignInfoChangedNotify.Builder {
        self.signInfo = value
        return self
      }
      public func clearSignInfo() -> ImProto.BdySignInfoChangedNotify.Builder{
           builderResult.hasSignInfo = false
           builderResult.signInfo = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdySignInfoChangedNotify.Builder {
        builderResult = ImProto.BdySignInfoChangedNotify()
        return self
      }
      public override func clone() throws -> ImProto.BdySignInfoChangedNotify.Builder {
        return try ImProto.BdySignInfoChangedNotify.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdySignInfoChangedNotify {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdySignInfoChangedNotify {
        let returnMe:ImProto.BdySignInfoChangedNotify = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdySignInfoChangedNotify) throws -> ImProto.BdySignInfoChangedNotify.Builder {
        if other == ImProto.BdySignInfoChangedNotify() {
         return self
        }
        if other.hasChangedUserId {
             changedUserId = other.changedUserId
        }
        if other.hasSignInfo {
             signInfo = other.signInfo
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdySignInfoChangedNotify.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdySignInfoChangedNotify.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            changedUserId = try input.readString()

          case 18 :
            signInfo = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //好友列表信息同步回执
  final public class BdyListAck : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var fromUserId:String = ""

    public private(set) var hasFromUserId:Bool = false
    public private(set) var serialNumber:Int32 = Int32(0)

    public private(set) var hasSerialNumber:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasFromUserId {
        return false
      }
      if !hasSerialNumber {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasFromUserId {
        try output.writeString(1, value:fromUserId)
      }
      if hasSerialNumber {
        try output.writeInt32(2, value:serialNumber)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFromUserId {
        serialize_size += fromUserId.computeStringSize(1)
      }
      if hasSerialNumber {
        serialize_size += serialNumber.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyListAck> {
      var mergedArray = Array<ImProto.BdyListAck>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyListAck? {
      return try ImProto.BdyListAck.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyListAck {
      return try ImProto.BdyListAck.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyListAck {
      return try ImProto.BdyListAck.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyListAck {
      return try ImProto.BdyListAck.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyListAck {
      return try ImProto.BdyListAck.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyListAck {
      return try ImProto.BdyListAck.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyListAck {
      return try ImProto.BdyListAck.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyListAck.Builder {
      return ImProto.BdyListAck.classBuilder() as! ImProto.BdyListAck.Builder
    }
    public func getBuilder() -> ImProto.BdyListAck.Builder {
      return classBuilder() as! ImProto.BdyListAck.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyListAck.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyListAck.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyListAck.Builder {
      return try ImProto.BdyListAck.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyListAck) throws -> ImProto.BdyListAck.Builder {
      return try ImProto.BdyListAck.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasFromUserId {
        output += "\(indent) fromUserId: \(fromUserId) \n"
      }
      if hasSerialNumber {
        output += "\(indent) serialNumber: \(serialNumber) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFromUserId {
               hashCode = (hashCode &* 31) &+ fromUserId.hashValue
            }
            if hasSerialNumber {
               hashCode = (hashCode &* 31) &+ serialNumber.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyListAck"
    }
    override public func className() -> String {
        return "ImProto.BdyListAck"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyListAck.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyListAck = ImProto.BdyListAck()
      public func getMessage() -> ImProto.BdyListAck {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFromUserId:Bool {
           get {
                return builderResult.hasFromUserId
           }
      }
      public var fromUserId:String {
           get {
                return builderResult.fromUserId
           }
           set (value) {
               builderResult.hasFromUserId = true
               builderResult.fromUserId = value
           }
      }
      public func setFromUserId(value:String) -> ImProto.BdyListAck.Builder {
        self.fromUserId = value
        return self
      }
      public func clearFromUserId() -> ImProto.BdyListAck.Builder{
           builderResult.hasFromUserId = false
           builderResult.fromUserId = ""
           return self
      }
      public var hasSerialNumber:Bool {
           get {
                return builderResult.hasSerialNumber
           }
      }
      public var serialNumber:Int32 {
           get {
                return builderResult.serialNumber
           }
           set (value) {
               builderResult.hasSerialNumber = true
               builderResult.serialNumber = value
           }
      }
      public func setSerialNumber(value:Int32) -> ImProto.BdyListAck.Builder {
        self.serialNumber = value
        return self
      }
      public func clearSerialNumber() -> ImProto.BdyListAck.Builder{
           builderResult.hasSerialNumber = false
           builderResult.serialNumber = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyListAck.Builder {
        builderResult = ImProto.BdyListAck()
        return self
      }
      public override func clone() throws -> ImProto.BdyListAck.Builder {
        return try ImProto.BdyListAck.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyListAck {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyListAck {
        let returnMe:ImProto.BdyListAck = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyListAck) throws -> ImProto.BdyListAck.Builder {
        if other == ImProto.BdyListAck() {
         return self
        }
        if other.hasFromUserId {
             fromUserId = other.fromUserId
        }
        if other.hasSerialNumber {
             serialNumber = other.serialNumber
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyListAck.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyListAck.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            fromUserId = try input.readString()

          case 16 :
            serialNumber = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //修改好友备注
  final public class BdyChangeUserRemarkReq : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var changedUserId:String = ""

    public private(set) var hasChangedUserId:Bool = false
    public private(set) var remark:String = ""

    public private(set) var hasRemark:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasChangedUserId {
        return false
      }
      if !hasRemark {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasChangedUserId {
        try output.writeString(1, value:changedUserId)
      }
      if hasRemark {
        try output.writeString(2, value:remark)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasChangedUserId {
        serialize_size += changedUserId.computeStringSize(1)
      }
      if hasRemark {
        serialize_size += remark.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.BdyChangeUserRemarkReq> {
      var mergedArray = Array<ImProto.BdyChangeUserRemarkReq>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.BdyChangeUserRemarkReq? {
      return try ImProto.BdyChangeUserRemarkReq.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.BdyChangeUserRemarkReq {
      return try ImProto.BdyChangeUserRemarkReq.Builder().mergeFromData(data, extensionRegistry:ImProto.BuddyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeUserRemarkReq {
      return try ImProto.BdyChangeUserRemarkReq.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.BdyChangeUserRemarkReq {
      return try ImProto.BdyChangeUserRemarkReq.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeUserRemarkReq {
      return try ImProto.BdyChangeUserRemarkReq.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyChangeUserRemarkReq {
      return try ImProto.BdyChangeUserRemarkReq.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeUserRemarkReq {
      return try ImProto.BdyChangeUserRemarkReq.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.BdyChangeUserRemarkReq.Builder {
      return ImProto.BdyChangeUserRemarkReq.classBuilder() as! ImProto.BdyChangeUserRemarkReq.Builder
    }
    public func getBuilder() -> ImProto.BdyChangeUserRemarkReq.Builder {
      return classBuilder() as! ImProto.BdyChangeUserRemarkReq.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.BdyChangeUserRemarkReq.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.BdyChangeUserRemarkReq.Builder()
    }
    public func toBuilder() throws -> ImProto.BdyChangeUserRemarkReq.Builder {
      return try ImProto.BdyChangeUserRemarkReq.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.BdyChangeUserRemarkReq) throws -> ImProto.BdyChangeUserRemarkReq.Builder {
      return try ImProto.BdyChangeUserRemarkReq.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasChangedUserId {
        output += "\(indent) changedUserId: \(changedUserId) \n"
      }
      if hasRemark {
        output += "\(indent) remark: \(remark) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasChangedUserId {
               hashCode = (hashCode &* 31) &+ changedUserId.hashValue
            }
            if hasRemark {
               hashCode = (hashCode &* 31) &+ remark.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.BdyChangeUserRemarkReq"
    }
    override public func className() -> String {
        return "ImProto.BdyChangeUserRemarkReq"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.BdyChangeUserRemarkReq.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.BdyChangeUserRemarkReq = ImProto.BdyChangeUserRemarkReq()
      public func getMessage() -> ImProto.BdyChangeUserRemarkReq {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasChangedUserId:Bool {
           get {
                return builderResult.hasChangedUserId
           }
      }
      public var changedUserId:String {
           get {
                return builderResult.changedUserId
           }
           set (value) {
               builderResult.hasChangedUserId = true
               builderResult.changedUserId = value
           }
      }
      public func setChangedUserId(value:String) -> ImProto.BdyChangeUserRemarkReq.Builder {
        self.changedUserId = value
        return self
      }
      public func clearChangedUserId() -> ImProto.BdyChangeUserRemarkReq.Builder{
           builderResult.hasChangedUserId = false
           builderResult.changedUserId = ""
           return self
      }
      public var hasRemark:Bool {
           get {
                return builderResult.hasRemark
           }
      }
      public var remark:String {
           get {
                return builderResult.remark
           }
           set (value) {
               builderResult.hasRemark = true
               builderResult.remark = value
           }
      }
      public func setRemark(value:String) -> ImProto.BdyChangeUserRemarkReq.Builder {
        self.remark = value
        return self
      }
      public func clearRemark() -> ImProto.BdyChangeUserRemarkReq.Builder{
           builderResult.hasRemark = false
           builderResult.remark = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.BdyChangeUserRemarkReq.Builder {
        builderResult = ImProto.BdyChangeUserRemarkReq()
        return self
      }
      public override func clone() throws -> ImProto.BdyChangeUserRemarkReq.Builder {
        return try ImProto.BdyChangeUserRemarkReq.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.BdyChangeUserRemarkReq {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.BdyChangeUserRemarkReq {
        let returnMe:ImProto.BdyChangeUserRemarkReq = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.BdyChangeUserRemarkReq) throws -> ImProto.BdyChangeUserRemarkReq.Builder {
        if other == ImProto.BdyChangeUserRemarkReq() {
         return self
        }
        if other.hasChangedUserId {
             changedUserId = other.changedUserId
        }
        if other.hasRemark {
             remark = other.remark
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.BdyChangeUserRemarkReq.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.BdyChangeUserRemarkReq.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            changedUserId = try input.readString()

          case 18 :
            remark = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
