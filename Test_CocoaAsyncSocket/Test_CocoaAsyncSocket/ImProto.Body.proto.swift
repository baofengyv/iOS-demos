// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Body.proto

import Foundation
import ProtocolBuffers


public extension ImProto{}

public func == (lhs: ImProto.Body, rhs: ImProto.Body) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsgData == rhs.hasMsgData) && (!lhs.hasMsgData || lhs.msgData == rhs.msgData)
  fieldCheck = fieldCheck && (lhs.hasMsgDataAck == rhs.hasMsgDataAck) && (!lhs.hasMsgDataAck || lhs.msgDataAck == rhs.msgDataAck)
  fieldCheck = fieldCheck && (lhs.hasMsgDataReadAck == rhs.hasMsgDataReadAck) && (!lhs.hasMsgDataReadAck || lhs.msgDataReadAck == rhs.msgDataReadAck)
  fieldCheck = fieldCheck && (lhs.hasLoginReqToken == rhs.hasLoginReqToken) && (!lhs.hasLoginReqToken || lhs.loginReqToken == rhs.loginReqToken)
  fieldCheck = fieldCheck && (lhs.hasLoginResToken == rhs.hasLoginResToken) && (!lhs.hasLoginResToken || lhs.loginResToken == rhs.loginResToken)
  fieldCheck = fieldCheck && (lhs.hasSysAck == rhs.hasSysAck) && (!lhs.hasSysAck || lhs.sysAck == rhs.sysAck)
  fieldCheck = fieldCheck && (lhs.hasSysOffConnect == rhs.hasSysOffConnect) && (!lhs.hasSysOffConnect || lhs.sysOffConnect == rhs.sysOffConnect)
  fieldCheck = fieldCheck && (lhs.hasSysNoRecordsPush == rhs.hasSysNoRecordsPush) && (!lhs.hasSysNoRecordsPush || lhs.sysNoRecordsPush == rhs.sysNoRecordsPush)
  fieldCheck = fieldCheck && (lhs.hasBdyAddBuddyReq == rhs.hasBdyAddBuddyReq) && (!lhs.hasBdyAddBuddyReq || lhs.bdyAddBuddyReq == rhs.bdyAddBuddyReq)
  fieldCheck = fieldCheck && (lhs.hasBdyAddBuddyRes == rhs.hasBdyAddBuddyRes) && (!lhs.hasBdyAddBuddyRes || lhs.bdyAddBuddyRes == rhs.bdyAddBuddyRes)
  fieldCheck = fieldCheck && (lhs.hasBdyDeleteBuddyReq == rhs.hasBdyDeleteBuddyReq) && (!lhs.hasBdyDeleteBuddyReq || lhs.bdyDeleteBuddyReq == rhs.bdyDeleteBuddyReq)
  fieldCheck = fieldCheck && (lhs.hasBdyUsersInfoReq == rhs.hasBdyUsersInfoReq) && (!lhs.hasBdyUsersInfoReq || lhs.bdyUsersInfoReq == rhs.bdyUsersInfoReq)
  fieldCheck = fieldCheck && (lhs.hasBdyUsersInfoRes == rhs.hasBdyUsersInfoRes) && (!lhs.hasBdyUsersInfoRes || lhs.bdyUsersInfoRes == rhs.bdyUsersInfoRes)
  fieldCheck = fieldCheck && (lhs.hasBdyChangeUserRemarkReq == rhs.hasBdyChangeUserRemarkReq) && (!lhs.hasBdyChangeUserRemarkReq || lhs.bdyChangeUserRemarkReq == rhs.bdyChangeUserRemarkReq)
  fieldCheck = fieldCheck && (lhs.hasBdyListAck == rhs.hasBdyListAck) && (!lhs.hasBdyListAck || lhs.bdyListAck == rhs.bdyListAck)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension ImProto {
  public struct BodyRoot {
    public static var sharedInstance : BodyRoot {
     struct Static {
         static let instance : BodyRoot = BodyRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ImProto.Message_Root.sharedInstance.registerAllExtensions(extensionRegistry)
      ImProto.LoginRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      ImProto.SysRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      ImProto.BuddyRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class Body : GeneratedMessage, GeneratedMessageProtocol {


    //OneOf declaration start

    public enum TestOneof {
      case TestOneofOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .TestOneofOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case MsgData(ImProto.MsgData)

      public static func getMsgData(value:TestOneof) -> ImProto.MsgData? {
           switch value {
           case .MsgData(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case MsgDataAck(ImProto.MsgDataAck)

      public static func getMsgDataAck(value:TestOneof) -> ImProto.MsgDataAck? {
           switch value {
           case .MsgDataAck(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case MsgDataReadAck(ImProto.MsgDataReadAck)

      public static func getMsgDataReadAck(value:TestOneof) -> ImProto.MsgDataReadAck? {
           switch value {
           case .MsgDataReadAck(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case LoginReqToken(ImProto.LoginReqToken)

      public static func getLoginReqToken(value:TestOneof) -> ImProto.LoginReqToken? {
           switch value {
           case .LoginReqToken(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case LoginResToken(ImProto.LoginResToken)

      public static func getLoginResToken(value:TestOneof) -> ImProto.LoginResToken? {
           switch value {
           case .LoginResToken(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SysAck(ImProto.SysAck)

      public static func getSysAck(value:TestOneof) -> ImProto.SysAck? {
           switch value {
           case .SysAck(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SysOffConnect(ImProto.SysOffConnect)

      public static func getSysOffConnect(value:TestOneof) -> ImProto.SysOffConnect? {
           switch value {
           case .SysOffConnect(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SysNoRecordsPush(ImProto.SysNoRecordsPush)

      public static func getSysNoRecordsPush(value:TestOneof) -> ImProto.SysNoRecordsPush? {
           switch value {
           case .SysNoRecordsPush(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BdyAddBuddyReq(ImProto.BdyAddBuddyReq)

      public static func getBdyAddBuddyReq(value:TestOneof) -> ImProto.BdyAddBuddyReq? {
           switch value {
           case .BdyAddBuddyReq(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BdyAddBuddyRes(ImProto.BdyAddBuddyRes)

      public static func getBdyAddBuddyRes(value:TestOneof) -> ImProto.BdyAddBuddyRes? {
           switch value {
           case .BdyAddBuddyRes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BdyDeleteBuddyReq(ImProto.BdyDeleteBuddyReq)

      public static func getBdyDeleteBuddyReq(value:TestOneof) -> ImProto.BdyDeleteBuddyReq? {
           switch value {
           case .BdyDeleteBuddyReq(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BdyUsersInfoReq(ImProto.BdyUsersInfoReq)

      public static func getBdyUsersInfoReq(value:TestOneof) -> ImProto.BdyUsersInfoReq? {
           switch value {
           case .BdyUsersInfoReq(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BdyUsersInfoRes(ImProto.BdyUsersInfoRes)

      public static func getBdyUsersInfoRes(value:TestOneof) -> ImProto.BdyUsersInfoRes? {
           switch value {
           case .BdyUsersInfoRes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BdyChangeUserRemarkReq(ImProto.BdyChangeUserRemarkReq)

      public static func getBdyChangeUserRemarkReq(value:TestOneof) -> ImProto.BdyChangeUserRemarkReq? {
           switch value {
           case .BdyChangeUserRemarkReq(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BdyListAck(ImProto.BdyListAck)

      public static func getBdyListAck(value:TestOneof) -> ImProto.BdyListAck? {
           switch value {
           case .BdyListAck(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageTestOneof:Body.TestOneof =  Body.TestOneof.TestOneofOneOfNotSet
    public private(set) var msgData:ImProto.MsgData!{
         get {
              return Body.TestOneof.getMsgData(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.MsgData(newvalue)
         }
    }
    public private(set) var hasMsgData:Bool {
          get {
               if Body.TestOneof.getMsgData(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var msgDataAck:ImProto.MsgDataAck!{
         get {
              return Body.TestOneof.getMsgDataAck(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.MsgDataAck(newvalue)
         }
    }
    public private(set) var hasMsgDataAck:Bool {
          get {
               if Body.TestOneof.getMsgDataAck(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var msgDataReadAck:ImProto.MsgDataReadAck!{
         get {
              return Body.TestOneof.getMsgDataReadAck(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.MsgDataReadAck(newvalue)
         }
    }
    public private(set) var hasMsgDataReadAck:Bool {
          get {
               if Body.TestOneof.getMsgDataReadAck(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var loginReqToken:ImProto.LoginReqToken!{
         get {
              return Body.TestOneof.getLoginReqToken(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.LoginReqToken(newvalue)
         }
    }
    public private(set) var hasLoginReqToken:Bool {
          get {
               if Body.TestOneof.getLoginReqToken(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var loginResToken:ImProto.LoginResToken!{
         get {
              return Body.TestOneof.getLoginResToken(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.LoginResToken(newvalue)
         }
    }
    public private(set) var hasLoginResToken:Bool {
          get {
               if Body.TestOneof.getLoginResToken(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var sysAck:ImProto.SysAck!{
         get {
              return Body.TestOneof.getSysAck(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.SysAck(newvalue)
         }
    }
    public private(set) var hasSysAck:Bool {
          get {
               if Body.TestOneof.getSysAck(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var sysOffConnect:ImProto.SysOffConnect!{
         get {
              return Body.TestOneof.getSysOffConnect(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.SysOffConnect(newvalue)
         }
    }
    public private(set) var hasSysOffConnect:Bool {
          get {
               if Body.TestOneof.getSysOffConnect(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var sysNoRecordsPush:ImProto.SysNoRecordsPush!{
         get {
              return Body.TestOneof.getSysNoRecordsPush(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.SysNoRecordsPush(newvalue)
         }
    }
    public private(set) var hasSysNoRecordsPush:Bool {
          get {
               if Body.TestOneof.getSysNoRecordsPush(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var bdyAddBuddyReq:ImProto.BdyAddBuddyReq!{
         get {
              return Body.TestOneof.getBdyAddBuddyReq(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.BdyAddBuddyReq(newvalue)
         }
    }
    public private(set) var hasBdyAddBuddyReq:Bool {
          get {
               if Body.TestOneof.getBdyAddBuddyReq(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var bdyAddBuddyRes:ImProto.BdyAddBuddyRes!{
         get {
              return Body.TestOneof.getBdyAddBuddyRes(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.BdyAddBuddyRes(newvalue)
         }
    }
    public private(set) var hasBdyAddBuddyRes:Bool {
          get {
               if Body.TestOneof.getBdyAddBuddyRes(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var bdyDeleteBuddyReq:ImProto.BdyDeleteBuddyReq!{
         get {
              return Body.TestOneof.getBdyDeleteBuddyReq(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.BdyDeleteBuddyReq(newvalue)
         }
    }
    public private(set) var hasBdyDeleteBuddyReq:Bool {
          get {
               if Body.TestOneof.getBdyDeleteBuddyReq(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var bdyUsersInfoReq:ImProto.BdyUsersInfoReq!{
         get {
              return Body.TestOneof.getBdyUsersInfoReq(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.BdyUsersInfoReq(newvalue)
         }
    }
    public private(set) var hasBdyUsersInfoReq:Bool {
          get {
               if Body.TestOneof.getBdyUsersInfoReq(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var bdyUsersInfoRes:ImProto.BdyUsersInfoRes!{
         get {
              return Body.TestOneof.getBdyUsersInfoRes(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.BdyUsersInfoRes(newvalue)
         }
    }
    public private(set) var hasBdyUsersInfoRes:Bool {
          get {
               if Body.TestOneof.getBdyUsersInfoRes(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var bdyChangeUserRemarkReq:ImProto.BdyChangeUserRemarkReq!{
         get {
              return Body.TestOneof.getBdyChangeUserRemarkReq(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.BdyChangeUserRemarkReq(newvalue)
         }
    }
    public private(set) var hasBdyChangeUserRemarkReq:Bool {
          get {
               if Body.TestOneof.getBdyChangeUserRemarkReq(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var bdyListAck:ImProto.BdyListAck!{
         get {
              return Body.TestOneof.getBdyListAck(storageTestOneof)
         }
         set (newvalue) {
              storageTestOneof = Body.TestOneof.BdyListAck(newvalue)
         }
    }
    public private(set) var hasBdyListAck:Bool {
          get {
               if Body.TestOneof.getBdyListAck(storageTestOneof) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if hasMsgData {
       if !msgData.isInitialized() {
         return false
       }
      }
      if hasMsgDataAck {
       if !msgDataAck.isInitialized() {
         return false
       }
      }
      if hasMsgDataReadAck {
       if !msgDataReadAck.isInitialized() {
         return false
       }
      }
      if hasLoginReqToken {
       if !loginReqToken.isInitialized() {
         return false
       }
      }
      if hasLoginResToken {
       if !loginResToken.isInitialized() {
         return false
       }
      }
      if hasSysAck {
       if !sysAck.isInitialized() {
         return false
       }
      }
      if hasSysOffConnect {
       if !sysOffConnect.isInitialized() {
         return false
       }
      }
      if hasSysNoRecordsPush {
       if !sysNoRecordsPush.isInitialized() {
         return false
       }
      }
      if hasBdyAddBuddyReq {
       if !bdyAddBuddyReq.isInitialized() {
         return false
       }
      }
      if hasBdyAddBuddyRes {
       if !bdyAddBuddyRes.isInitialized() {
         return false
       }
      }
      if hasBdyDeleteBuddyReq {
       if !bdyDeleteBuddyReq.isInitialized() {
         return false
       }
      }
      if hasBdyUsersInfoRes {
       if !bdyUsersInfoRes.isInitialized() {
         return false
       }
      }
      if hasBdyChangeUserRemarkReq {
       if !bdyChangeUserRemarkReq.isInitialized() {
         return false
       }
      }
      if hasBdyListAck {
       if !bdyListAck.isInitialized() {
         return false
       }
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMsgData {
        try output.writeMessage(1, value:msgData)
      }
      if hasMsgDataAck {
        try output.writeMessage(2, value:msgDataAck)
      }
      if hasMsgDataReadAck {
        try output.writeMessage(3, value:msgDataReadAck)
      }
      if hasLoginReqToken {
        try output.writeMessage(4, value:loginReqToken)
      }
      if hasLoginResToken {
        try output.writeMessage(5, value:loginResToken)
      }
      if hasSysAck {
        try output.writeMessage(6, value:sysAck)
      }
      if hasSysOffConnect {
        try output.writeMessage(7, value:sysOffConnect)
      }
      if hasSysNoRecordsPush {
        try output.writeMessage(8, value:sysNoRecordsPush)
      }
      if hasBdyAddBuddyReq {
        try output.writeMessage(9, value:bdyAddBuddyReq)
      }
      if hasBdyAddBuddyRes {
        try output.writeMessage(10, value:bdyAddBuddyRes)
      }
      if hasBdyDeleteBuddyReq {
        try output.writeMessage(11, value:bdyDeleteBuddyReq)
      }
      if hasBdyUsersInfoReq {
        try output.writeMessage(12, value:bdyUsersInfoReq)
      }
      if hasBdyUsersInfoRes {
        try output.writeMessage(13, value:bdyUsersInfoRes)
      }
      if hasBdyChangeUserRemarkReq {
        try output.writeMessage(14, value:bdyChangeUserRemarkReq)
      }
      if hasBdyListAck {
        try output.writeMessage(100, value:bdyListAck)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMsgData {
          if let varSizemsgData = msgData?.computeMessageSize(1) {
              serialize_size += varSizemsgData
          }
      }
      if hasMsgDataAck {
          if let varSizemsgDataAck = msgDataAck?.computeMessageSize(2) {
              serialize_size += varSizemsgDataAck
          }
      }
      if hasMsgDataReadAck {
          if let varSizemsgDataReadAck = msgDataReadAck?.computeMessageSize(3) {
              serialize_size += varSizemsgDataReadAck
          }
      }
      if hasLoginReqToken {
          if let varSizeloginReqToken = loginReqToken?.computeMessageSize(4) {
              serialize_size += varSizeloginReqToken
          }
      }
      if hasLoginResToken {
          if let varSizeloginResToken = loginResToken?.computeMessageSize(5) {
              serialize_size += varSizeloginResToken
          }
      }
      if hasSysAck {
          if let varSizesysAck = sysAck?.computeMessageSize(6) {
              serialize_size += varSizesysAck
          }
      }
      if hasSysOffConnect {
          if let varSizesysOffConnect = sysOffConnect?.computeMessageSize(7) {
              serialize_size += varSizesysOffConnect
          }
      }
      if hasSysNoRecordsPush {
          if let varSizesysNoRecordsPush = sysNoRecordsPush?.computeMessageSize(8) {
              serialize_size += varSizesysNoRecordsPush
          }
      }
      if hasBdyAddBuddyReq {
          if let varSizebdyAddBuddyReq = bdyAddBuddyReq?.computeMessageSize(9) {
              serialize_size += varSizebdyAddBuddyReq
          }
      }
      if hasBdyAddBuddyRes {
          if let varSizebdyAddBuddyRes = bdyAddBuddyRes?.computeMessageSize(10) {
              serialize_size += varSizebdyAddBuddyRes
          }
      }
      if hasBdyDeleteBuddyReq {
          if let varSizebdyDeleteBuddyReq = bdyDeleteBuddyReq?.computeMessageSize(11) {
              serialize_size += varSizebdyDeleteBuddyReq
          }
      }
      if hasBdyUsersInfoReq {
          if let varSizebdyUsersInfoReq = bdyUsersInfoReq?.computeMessageSize(12) {
              serialize_size += varSizebdyUsersInfoReq
          }
      }
      if hasBdyUsersInfoRes {
          if let varSizebdyUsersInfoRes = bdyUsersInfoRes?.computeMessageSize(13) {
              serialize_size += varSizebdyUsersInfoRes
          }
      }
      if hasBdyChangeUserRemarkReq {
          if let varSizebdyChangeUserRemarkReq = bdyChangeUserRemarkReq?.computeMessageSize(14) {
              serialize_size += varSizebdyChangeUserRemarkReq
          }
      }
      if hasBdyListAck {
          if let varSizebdyListAck = bdyListAck?.computeMessageSize(100) {
              serialize_size += varSizebdyListAck
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.Body> {
      var mergedArray = Array<ImProto.Body>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.Body? {
      return try ImProto.Body.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.Body {
      return try ImProto.Body.Builder().mergeFromData(data, extensionRegistry:ImProto.BodyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.Body {
      return try ImProto.Body.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.Body {
      return try ImProto.Body.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.Body {
      return try ImProto.Body.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.Body {
      return try ImProto.Body.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.Body {
      return try ImProto.Body.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.Body.Builder {
      return ImProto.Body.classBuilder() as! ImProto.Body.Builder
    }
    public func getBuilder() -> ImProto.Body.Builder {
      return classBuilder() as! ImProto.Body.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.Body.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.Body.Builder()
    }
    public func toBuilder() throws -> ImProto.Body.Builder {
      return try ImProto.Body.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.Body) throws -> ImProto.Body.Builder {
      return try ImProto.Body.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasMsgData {
        output += "\(indent) msgData {\n"
        if let outDescMsgData = msgData {
          output += try outDescMsgData.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMsgDataAck {
        output += "\(indent) msgDataAck {\n"
        if let outDescMsgDataAck = msgDataAck {
          output += try outDescMsgDataAck.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMsgDataReadAck {
        output += "\(indent) msgDataReadAck {\n"
        if let outDescMsgDataReadAck = msgDataReadAck {
          output += try outDescMsgDataReadAck.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLoginReqToken {
        output += "\(indent) loginReqToken {\n"
        if let outDescLoginReqToken = loginReqToken {
          output += try outDescLoginReqToken.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLoginResToken {
        output += "\(indent) loginResToken {\n"
        if let outDescLoginResToken = loginResToken {
          output += try outDescLoginResToken.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSysAck {
        output += "\(indent) sysAck {\n"
        if let outDescSysAck = sysAck {
          output += try outDescSysAck.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSysOffConnect {
        output += "\(indent) sysOffConnect {\n"
        if let outDescSysOffConnect = sysOffConnect {
          output += try outDescSysOffConnect.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSysNoRecordsPush {
        output += "\(indent) sysNoRecordsPush {\n"
        if let outDescSysNoRecordsPush = sysNoRecordsPush {
          output += try outDescSysNoRecordsPush.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBdyAddBuddyReq {
        output += "\(indent) bdyAddBuddyReq {\n"
        if let outDescBdyAddBuddyReq = bdyAddBuddyReq {
          output += try outDescBdyAddBuddyReq.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBdyAddBuddyRes {
        output += "\(indent) bdyAddBuddyRes {\n"
        if let outDescBdyAddBuddyRes = bdyAddBuddyRes {
          output += try outDescBdyAddBuddyRes.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBdyDeleteBuddyReq {
        output += "\(indent) bdyDeleteBuddyReq {\n"
        if let outDescBdyDeleteBuddyReq = bdyDeleteBuddyReq {
          output += try outDescBdyDeleteBuddyReq.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBdyUsersInfoReq {
        output += "\(indent) bdyUsersInfoReq {\n"
        if let outDescBdyUsersInfoReq = bdyUsersInfoReq {
          output += try outDescBdyUsersInfoReq.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBdyUsersInfoRes {
        output += "\(indent) bdyUsersInfoRes {\n"
        if let outDescBdyUsersInfoRes = bdyUsersInfoRes {
          output += try outDescBdyUsersInfoRes.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBdyChangeUserRemarkReq {
        output += "\(indent) bdyChangeUserRemarkReq {\n"
        if let outDescBdyChangeUserRemarkReq = bdyChangeUserRemarkReq {
          output += try outDescBdyChangeUserRemarkReq.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBdyListAck {
        output += "\(indent) bdyListAck {\n"
        if let outDescBdyListAck = bdyListAck {
          output += try outDescBdyListAck.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMsgData {
                if let hashValuemsgData = msgData?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemsgData
                }
            }
            if hasMsgDataAck {
                if let hashValuemsgDataAck = msgDataAck?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemsgDataAck
                }
            }
            if hasMsgDataReadAck {
                if let hashValuemsgDataReadAck = msgDataReadAck?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemsgDataReadAck
                }
            }
            if hasLoginReqToken {
                if let hashValueloginReqToken = loginReqToken?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueloginReqToken
                }
            }
            if hasLoginResToken {
                if let hashValueloginResToken = loginResToken?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueloginResToken
                }
            }
            if hasSysAck {
                if let hashValuesysAck = sysAck?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesysAck
                }
            }
            if hasSysOffConnect {
                if let hashValuesysOffConnect = sysOffConnect?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesysOffConnect
                }
            }
            if hasSysNoRecordsPush {
                if let hashValuesysNoRecordsPush = sysNoRecordsPush?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesysNoRecordsPush
                }
            }
            if hasBdyAddBuddyReq {
                if let hashValuebdyAddBuddyReq = bdyAddBuddyReq?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebdyAddBuddyReq
                }
            }
            if hasBdyAddBuddyRes {
                if let hashValuebdyAddBuddyRes = bdyAddBuddyRes?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebdyAddBuddyRes
                }
            }
            if hasBdyDeleteBuddyReq {
                if let hashValuebdyDeleteBuddyReq = bdyDeleteBuddyReq?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebdyDeleteBuddyReq
                }
            }
            if hasBdyUsersInfoReq {
                if let hashValuebdyUsersInfoReq = bdyUsersInfoReq?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebdyUsersInfoReq
                }
            }
            if hasBdyUsersInfoRes {
                if let hashValuebdyUsersInfoRes = bdyUsersInfoRes?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebdyUsersInfoRes
                }
            }
            if hasBdyChangeUserRemarkReq {
                if let hashValuebdyChangeUserRemarkReq = bdyChangeUserRemarkReq?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebdyChangeUserRemarkReq
                }
            }
            if hasBdyListAck {
                if let hashValuebdyListAck = bdyListAck?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebdyListAck
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.Body"
    }
    override public func className() -> String {
        return "ImProto.Body"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.Body.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.Body = ImProto.Body()
      public func getMessage() -> ImProto.Body {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMsgData:Bool {
           get {
               return builderResult.hasMsgData
           }
      }
      public var msgData:ImProto.MsgData! {
           get {
               if msgDataBuilder_ != nil {
                  builderResult.msgData = msgDataBuilder_.getMessage()
               }
               return builderResult.msgData
           }
           set (value) {
               builderResult.hasMsgData = true
               builderResult.msgData = value
           }
      }
      private var msgDataBuilder_:ImProto.MsgData.Builder! {
           didSet {
              builderResult.hasMsgData = true
           }
      }
      public func getMsgDataBuilder() -> ImProto.MsgData.Builder {
        if msgDataBuilder_ == nil {
           msgDataBuilder_ = ImProto.MsgData.Builder()
           builderResult.msgData = msgDataBuilder_.getMessage()
           if msgData != nil {
              try! msgDataBuilder_.mergeFrom(msgData)
           }
        }
        return msgDataBuilder_
      }
      public func setMsgData(value:ImProto.MsgData!) -> ImProto.Body.Builder {
        self.msgData = value
        return self
      }
      public func mergeMsgData(value:ImProto.MsgData) throws -> ImProto.Body.Builder {
        if builderResult.hasMsgData {
          builderResult.msgData = try ImProto.MsgData.builderWithPrototype(builderResult.msgData).mergeFrom(value).buildPartial()
        } else {
          builderResult.msgData = value
        }
        builderResult.hasMsgData = true
        return self
      }
      public func clearMsgData() -> ImProto.Body.Builder {
        msgDataBuilder_ = nil
        builderResult.hasMsgData = false
        builderResult.msgData = nil
        return self
      }
      public var hasMsgDataAck:Bool {
           get {
               return builderResult.hasMsgDataAck
           }
      }
      public var msgDataAck:ImProto.MsgDataAck! {
           get {
               if msgDataAckBuilder_ != nil {
                  builderResult.msgDataAck = msgDataAckBuilder_.getMessage()
               }
               return builderResult.msgDataAck
           }
           set (value) {
               builderResult.hasMsgDataAck = true
               builderResult.msgDataAck = value
           }
      }
      private var msgDataAckBuilder_:ImProto.MsgDataAck.Builder! {
           didSet {
              builderResult.hasMsgDataAck = true
           }
      }
      public func getMsgDataAckBuilder() -> ImProto.MsgDataAck.Builder {
        if msgDataAckBuilder_ == nil {
           msgDataAckBuilder_ = ImProto.MsgDataAck.Builder()
           builderResult.msgDataAck = msgDataAckBuilder_.getMessage()
           if msgDataAck != nil {
              try! msgDataAckBuilder_.mergeFrom(msgDataAck)
           }
        }
        return msgDataAckBuilder_
      }
      public func setMsgDataAck(value:ImProto.MsgDataAck!) -> ImProto.Body.Builder {
        self.msgDataAck = value
        return self
      }
      public func mergeMsgDataAck(value:ImProto.MsgDataAck) throws -> ImProto.Body.Builder {
        if builderResult.hasMsgDataAck {
          builderResult.msgDataAck = try ImProto.MsgDataAck.builderWithPrototype(builderResult.msgDataAck).mergeFrom(value).buildPartial()
        } else {
          builderResult.msgDataAck = value
        }
        builderResult.hasMsgDataAck = true
        return self
      }
      public func clearMsgDataAck() -> ImProto.Body.Builder {
        msgDataAckBuilder_ = nil
        builderResult.hasMsgDataAck = false
        builderResult.msgDataAck = nil
        return self
      }
      public var hasMsgDataReadAck:Bool {
           get {
               return builderResult.hasMsgDataReadAck
           }
      }
      public var msgDataReadAck:ImProto.MsgDataReadAck! {
           get {
               if msgDataReadAckBuilder_ != nil {
                  builderResult.msgDataReadAck = msgDataReadAckBuilder_.getMessage()
               }
               return builderResult.msgDataReadAck
           }
           set (value) {
               builderResult.hasMsgDataReadAck = true
               builderResult.msgDataReadAck = value
           }
      }
      private var msgDataReadAckBuilder_:ImProto.MsgDataReadAck.Builder! {
           didSet {
              builderResult.hasMsgDataReadAck = true
           }
      }
      public func getMsgDataReadAckBuilder() -> ImProto.MsgDataReadAck.Builder {
        if msgDataReadAckBuilder_ == nil {
           msgDataReadAckBuilder_ = ImProto.MsgDataReadAck.Builder()
           builderResult.msgDataReadAck = msgDataReadAckBuilder_.getMessage()
           if msgDataReadAck != nil {
              try! msgDataReadAckBuilder_.mergeFrom(msgDataReadAck)
           }
        }
        return msgDataReadAckBuilder_
      }
      public func setMsgDataReadAck(value:ImProto.MsgDataReadAck!) -> ImProto.Body.Builder {
        self.msgDataReadAck = value
        return self
      }
      public func mergeMsgDataReadAck(value:ImProto.MsgDataReadAck) throws -> ImProto.Body.Builder {
        if builderResult.hasMsgDataReadAck {
          builderResult.msgDataReadAck = try ImProto.MsgDataReadAck.builderWithPrototype(builderResult.msgDataReadAck).mergeFrom(value).buildPartial()
        } else {
          builderResult.msgDataReadAck = value
        }
        builderResult.hasMsgDataReadAck = true
        return self
      }
      public func clearMsgDataReadAck() -> ImProto.Body.Builder {
        msgDataReadAckBuilder_ = nil
        builderResult.hasMsgDataReadAck = false
        builderResult.msgDataReadAck = nil
        return self
      }
      public var hasLoginReqToken:Bool {
           get {
               return builderResult.hasLoginReqToken
           }
      }
      public var loginReqToken:ImProto.LoginReqToken! {
           get {
               if loginReqTokenBuilder_ != nil {
                  builderResult.loginReqToken = loginReqTokenBuilder_.getMessage()
               }
               return builderResult.loginReqToken
           }
           set (value) {
               builderResult.hasLoginReqToken = true
               builderResult.loginReqToken = value
           }
      }
      private var loginReqTokenBuilder_:ImProto.LoginReqToken.Builder! {
           didSet {
              builderResult.hasLoginReqToken = true
           }
      }
      public func getLoginReqTokenBuilder() -> ImProto.LoginReqToken.Builder {
        if loginReqTokenBuilder_ == nil {
           loginReqTokenBuilder_ = ImProto.LoginReqToken.Builder()
           builderResult.loginReqToken = loginReqTokenBuilder_.getMessage()
           if loginReqToken != nil {
              try! loginReqTokenBuilder_.mergeFrom(loginReqToken)
           }
        }
        return loginReqTokenBuilder_
      }
      public func setLoginReqToken(value:ImProto.LoginReqToken!) -> ImProto.Body.Builder {
        self.loginReqToken = value
        return self
      }
      public func mergeLoginReqToken(value:ImProto.LoginReqToken) throws -> ImProto.Body.Builder {
        if builderResult.hasLoginReqToken {
          builderResult.loginReqToken = try ImProto.LoginReqToken.builderWithPrototype(builderResult.loginReqToken).mergeFrom(value).buildPartial()
        } else {
          builderResult.loginReqToken = value
        }
        builderResult.hasLoginReqToken = true
        return self
      }
      public func clearLoginReqToken() -> ImProto.Body.Builder {
        loginReqTokenBuilder_ = nil
        builderResult.hasLoginReqToken = false
        builderResult.loginReqToken = nil
        return self
      }
      public var hasLoginResToken:Bool {
           get {
               return builderResult.hasLoginResToken
           }
      }
      public var loginResToken:ImProto.LoginResToken! {
           get {
               if loginResTokenBuilder_ != nil {
                  builderResult.loginResToken = loginResTokenBuilder_.getMessage()
               }
               return builderResult.loginResToken
           }
           set (value) {
               builderResult.hasLoginResToken = true
               builderResult.loginResToken = value
           }
      }
      private var loginResTokenBuilder_:ImProto.LoginResToken.Builder! {
           didSet {
              builderResult.hasLoginResToken = true
           }
      }
      public func getLoginResTokenBuilder() -> ImProto.LoginResToken.Builder {
        if loginResTokenBuilder_ == nil {
           loginResTokenBuilder_ = ImProto.LoginResToken.Builder()
           builderResult.loginResToken = loginResTokenBuilder_.getMessage()
           if loginResToken != nil {
              try! loginResTokenBuilder_.mergeFrom(loginResToken)
           }
        }
        return loginResTokenBuilder_
      }
      public func setLoginResToken(value:ImProto.LoginResToken!) -> ImProto.Body.Builder {
        self.loginResToken = value
        return self
      }
      public func mergeLoginResToken(value:ImProto.LoginResToken) throws -> ImProto.Body.Builder {
        if builderResult.hasLoginResToken {
          builderResult.loginResToken = try ImProto.LoginResToken.builderWithPrototype(builderResult.loginResToken).mergeFrom(value).buildPartial()
        } else {
          builderResult.loginResToken = value
        }
        builderResult.hasLoginResToken = true
        return self
      }
      public func clearLoginResToken() -> ImProto.Body.Builder {
        loginResTokenBuilder_ = nil
        builderResult.hasLoginResToken = false
        builderResult.loginResToken = nil
        return self
      }
      public var hasSysAck:Bool {
           get {
               return builderResult.hasSysAck
           }
      }
      public var sysAck:ImProto.SysAck! {
           get {
               if sysAckBuilder_ != nil {
                  builderResult.sysAck = sysAckBuilder_.getMessage()
               }
               return builderResult.sysAck
           }
           set (value) {
               builderResult.hasSysAck = true
               builderResult.sysAck = value
           }
      }
      private var sysAckBuilder_:ImProto.SysAck.Builder! {
           didSet {
              builderResult.hasSysAck = true
           }
      }
      public func getSysAckBuilder() -> ImProto.SysAck.Builder {
        if sysAckBuilder_ == nil {
           sysAckBuilder_ = ImProto.SysAck.Builder()
           builderResult.sysAck = sysAckBuilder_.getMessage()
           if sysAck != nil {
              try! sysAckBuilder_.mergeFrom(sysAck)
           }
        }
        return sysAckBuilder_
      }
      public func setSysAck(value:ImProto.SysAck!) -> ImProto.Body.Builder {
        self.sysAck = value
        return self
      }
      public func mergeSysAck(value:ImProto.SysAck) throws -> ImProto.Body.Builder {
        if builderResult.hasSysAck {
          builderResult.sysAck = try ImProto.SysAck.builderWithPrototype(builderResult.sysAck).mergeFrom(value).buildPartial()
        } else {
          builderResult.sysAck = value
        }
        builderResult.hasSysAck = true
        return self
      }
      public func clearSysAck() -> ImProto.Body.Builder {
        sysAckBuilder_ = nil
        builderResult.hasSysAck = false
        builderResult.sysAck = nil
        return self
      }
      public var hasSysOffConnect:Bool {
           get {
               return builderResult.hasSysOffConnect
           }
      }
      public var sysOffConnect:ImProto.SysOffConnect! {
           get {
               if sysOffConnectBuilder_ != nil {
                  builderResult.sysOffConnect = sysOffConnectBuilder_.getMessage()
               }
               return builderResult.sysOffConnect
           }
           set (value) {
               builderResult.hasSysOffConnect = true
               builderResult.sysOffConnect = value
           }
      }
      private var sysOffConnectBuilder_:ImProto.SysOffConnect.Builder! {
           didSet {
              builderResult.hasSysOffConnect = true
           }
      }
      public func getSysOffConnectBuilder() -> ImProto.SysOffConnect.Builder {
        if sysOffConnectBuilder_ == nil {
           sysOffConnectBuilder_ = ImProto.SysOffConnect.Builder()
           builderResult.sysOffConnect = sysOffConnectBuilder_.getMessage()
           if sysOffConnect != nil {
              try! sysOffConnectBuilder_.mergeFrom(sysOffConnect)
           }
        }
        return sysOffConnectBuilder_
      }
      public func setSysOffConnect(value:ImProto.SysOffConnect!) -> ImProto.Body.Builder {
        self.sysOffConnect = value
        return self
      }
      public func mergeSysOffConnect(value:ImProto.SysOffConnect) throws -> ImProto.Body.Builder {
        if builderResult.hasSysOffConnect {
          builderResult.sysOffConnect = try ImProto.SysOffConnect.builderWithPrototype(builderResult.sysOffConnect).mergeFrom(value).buildPartial()
        } else {
          builderResult.sysOffConnect = value
        }
        builderResult.hasSysOffConnect = true
        return self
      }
      public func clearSysOffConnect() -> ImProto.Body.Builder {
        sysOffConnectBuilder_ = nil
        builderResult.hasSysOffConnect = false
        builderResult.sysOffConnect = nil
        return self
      }
      public var hasSysNoRecordsPush:Bool {
           get {
               return builderResult.hasSysNoRecordsPush
           }
      }
      public var sysNoRecordsPush:ImProto.SysNoRecordsPush! {
           get {
               if sysNoRecordsPushBuilder_ != nil {
                  builderResult.sysNoRecordsPush = sysNoRecordsPushBuilder_.getMessage()
               }
               return builderResult.sysNoRecordsPush
           }
           set (value) {
               builderResult.hasSysNoRecordsPush = true
               builderResult.sysNoRecordsPush = value
           }
      }
      private var sysNoRecordsPushBuilder_:ImProto.SysNoRecordsPush.Builder! {
           didSet {
              builderResult.hasSysNoRecordsPush = true
           }
      }
      public func getSysNoRecordsPushBuilder() -> ImProto.SysNoRecordsPush.Builder {
        if sysNoRecordsPushBuilder_ == nil {
           sysNoRecordsPushBuilder_ = ImProto.SysNoRecordsPush.Builder()
           builderResult.sysNoRecordsPush = sysNoRecordsPushBuilder_.getMessage()
           if sysNoRecordsPush != nil {
              try! sysNoRecordsPushBuilder_.mergeFrom(sysNoRecordsPush)
           }
        }
        return sysNoRecordsPushBuilder_
      }
      public func setSysNoRecordsPush(value:ImProto.SysNoRecordsPush!) -> ImProto.Body.Builder {
        self.sysNoRecordsPush = value
        return self
      }
      public func mergeSysNoRecordsPush(value:ImProto.SysNoRecordsPush) throws -> ImProto.Body.Builder {
        if builderResult.hasSysNoRecordsPush {
          builderResult.sysNoRecordsPush = try ImProto.SysNoRecordsPush.builderWithPrototype(builderResult.sysNoRecordsPush).mergeFrom(value).buildPartial()
        } else {
          builderResult.sysNoRecordsPush = value
        }
        builderResult.hasSysNoRecordsPush = true
        return self
      }
      public func clearSysNoRecordsPush() -> ImProto.Body.Builder {
        sysNoRecordsPushBuilder_ = nil
        builderResult.hasSysNoRecordsPush = false
        builderResult.sysNoRecordsPush = nil
        return self
      }
      public var hasBdyAddBuddyReq:Bool {
           get {
               return builderResult.hasBdyAddBuddyReq
           }
      }
      public var bdyAddBuddyReq:ImProto.BdyAddBuddyReq! {
           get {
               if bdyAddBuddyReqBuilder_ != nil {
                  builderResult.bdyAddBuddyReq = bdyAddBuddyReqBuilder_.getMessage()
               }
               return builderResult.bdyAddBuddyReq
           }
           set (value) {
               builderResult.hasBdyAddBuddyReq = true
               builderResult.bdyAddBuddyReq = value
           }
      }
      private var bdyAddBuddyReqBuilder_:ImProto.BdyAddBuddyReq.Builder! {
           didSet {
              builderResult.hasBdyAddBuddyReq = true
           }
      }
      public func getBdyAddBuddyReqBuilder() -> ImProto.BdyAddBuddyReq.Builder {
        if bdyAddBuddyReqBuilder_ == nil {
           bdyAddBuddyReqBuilder_ = ImProto.BdyAddBuddyReq.Builder()
           builderResult.bdyAddBuddyReq = bdyAddBuddyReqBuilder_.getMessage()
           if bdyAddBuddyReq != nil {
              try! bdyAddBuddyReqBuilder_.mergeFrom(bdyAddBuddyReq)
           }
        }
        return bdyAddBuddyReqBuilder_
      }
      public func setBdyAddBuddyReq(value:ImProto.BdyAddBuddyReq!) -> ImProto.Body.Builder {
        self.bdyAddBuddyReq = value
        return self
      }
      public func mergeBdyAddBuddyReq(value:ImProto.BdyAddBuddyReq) throws -> ImProto.Body.Builder {
        if builderResult.hasBdyAddBuddyReq {
          builderResult.bdyAddBuddyReq = try ImProto.BdyAddBuddyReq.builderWithPrototype(builderResult.bdyAddBuddyReq).mergeFrom(value).buildPartial()
        } else {
          builderResult.bdyAddBuddyReq = value
        }
        builderResult.hasBdyAddBuddyReq = true
        return self
      }
      public func clearBdyAddBuddyReq() -> ImProto.Body.Builder {
        bdyAddBuddyReqBuilder_ = nil
        builderResult.hasBdyAddBuddyReq = false
        builderResult.bdyAddBuddyReq = nil
        return self
      }
      public var hasBdyAddBuddyRes:Bool {
           get {
               return builderResult.hasBdyAddBuddyRes
           }
      }
      public var bdyAddBuddyRes:ImProto.BdyAddBuddyRes! {
           get {
               if bdyAddBuddyResBuilder_ != nil {
                  builderResult.bdyAddBuddyRes = bdyAddBuddyResBuilder_.getMessage()
               }
               return builderResult.bdyAddBuddyRes
           }
           set (value) {
               builderResult.hasBdyAddBuddyRes = true
               builderResult.bdyAddBuddyRes = value
           }
      }
      private var bdyAddBuddyResBuilder_:ImProto.BdyAddBuddyRes.Builder! {
           didSet {
              builderResult.hasBdyAddBuddyRes = true
           }
      }
      public func getBdyAddBuddyResBuilder() -> ImProto.BdyAddBuddyRes.Builder {
        if bdyAddBuddyResBuilder_ == nil {
           bdyAddBuddyResBuilder_ = ImProto.BdyAddBuddyRes.Builder()
           builderResult.bdyAddBuddyRes = bdyAddBuddyResBuilder_.getMessage()
           if bdyAddBuddyRes != nil {
              try! bdyAddBuddyResBuilder_.mergeFrom(bdyAddBuddyRes)
           }
        }
        return bdyAddBuddyResBuilder_
      }
      public func setBdyAddBuddyRes(value:ImProto.BdyAddBuddyRes!) -> ImProto.Body.Builder {
        self.bdyAddBuddyRes = value
        return self
      }
      public func mergeBdyAddBuddyRes(value:ImProto.BdyAddBuddyRes) throws -> ImProto.Body.Builder {
        if builderResult.hasBdyAddBuddyRes {
          builderResult.bdyAddBuddyRes = try ImProto.BdyAddBuddyRes.builderWithPrototype(builderResult.bdyAddBuddyRes).mergeFrom(value).buildPartial()
        } else {
          builderResult.bdyAddBuddyRes = value
        }
        builderResult.hasBdyAddBuddyRes = true
        return self
      }
      public func clearBdyAddBuddyRes() -> ImProto.Body.Builder {
        bdyAddBuddyResBuilder_ = nil
        builderResult.hasBdyAddBuddyRes = false
        builderResult.bdyAddBuddyRes = nil
        return self
      }
      public var hasBdyDeleteBuddyReq:Bool {
           get {
               return builderResult.hasBdyDeleteBuddyReq
           }
      }
      public var bdyDeleteBuddyReq:ImProto.BdyDeleteBuddyReq! {
           get {
               if bdyDeleteBuddyReqBuilder_ != nil {
                  builderResult.bdyDeleteBuddyReq = bdyDeleteBuddyReqBuilder_.getMessage()
               }
               return builderResult.bdyDeleteBuddyReq
           }
           set (value) {
               builderResult.hasBdyDeleteBuddyReq = true
               builderResult.bdyDeleteBuddyReq = value
           }
      }
      private var bdyDeleteBuddyReqBuilder_:ImProto.BdyDeleteBuddyReq.Builder! {
           didSet {
              builderResult.hasBdyDeleteBuddyReq = true
           }
      }
      public func getBdyDeleteBuddyReqBuilder() -> ImProto.BdyDeleteBuddyReq.Builder {
        if bdyDeleteBuddyReqBuilder_ == nil {
           bdyDeleteBuddyReqBuilder_ = ImProto.BdyDeleteBuddyReq.Builder()
           builderResult.bdyDeleteBuddyReq = bdyDeleteBuddyReqBuilder_.getMessage()
           if bdyDeleteBuddyReq != nil {
              try! bdyDeleteBuddyReqBuilder_.mergeFrom(bdyDeleteBuddyReq)
           }
        }
        return bdyDeleteBuddyReqBuilder_
      }
      public func setBdyDeleteBuddyReq(value:ImProto.BdyDeleteBuddyReq!) -> ImProto.Body.Builder {
        self.bdyDeleteBuddyReq = value
        return self
      }
      public func mergeBdyDeleteBuddyReq(value:ImProto.BdyDeleteBuddyReq) throws -> ImProto.Body.Builder {
        if builderResult.hasBdyDeleteBuddyReq {
          builderResult.bdyDeleteBuddyReq = try ImProto.BdyDeleteBuddyReq.builderWithPrototype(builderResult.bdyDeleteBuddyReq).mergeFrom(value).buildPartial()
        } else {
          builderResult.bdyDeleteBuddyReq = value
        }
        builderResult.hasBdyDeleteBuddyReq = true
        return self
      }
      public func clearBdyDeleteBuddyReq() -> ImProto.Body.Builder {
        bdyDeleteBuddyReqBuilder_ = nil
        builderResult.hasBdyDeleteBuddyReq = false
        builderResult.bdyDeleteBuddyReq = nil
        return self
      }
      public var hasBdyUsersInfoReq:Bool {
           get {
               return builderResult.hasBdyUsersInfoReq
           }
      }
      public var bdyUsersInfoReq:ImProto.BdyUsersInfoReq! {
           get {
               if bdyUsersInfoReqBuilder_ != nil {
                  builderResult.bdyUsersInfoReq = bdyUsersInfoReqBuilder_.getMessage()
               }
               return builderResult.bdyUsersInfoReq
           }
           set (value) {
               builderResult.hasBdyUsersInfoReq = true
               builderResult.bdyUsersInfoReq = value
           }
      }
      private var bdyUsersInfoReqBuilder_:ImProto.BdyUsersInfoReq.Builder! {
           didSet {
              builderResult.hasBdyUsersInfoReq = true
           }
      }
      public func getBdyUsersInfoReqBuilder() -> ImProto.BdyUsersInfoReq.Builder {
        if bdyUsersInfoReqBuilder_ == nil {
           bdyUsersInfoReqBuilder_ = ImProto.BdyUsersInfoReq.Builder()
           builderResult.bdyUsersInfoReq = bdyUsersInfoReqBuilder_.getMessage()
           if bdyUsersInfoReq != nil {
              try! bdyUsersInfoReqBuilder_.mergeFrom(bdyUsersInfoReq)
           }
        }
        return bdyUsersInfoReqBuilder_
      }
      public func setBdyUsersInfoReq(value:ImProto.BdyUsersInfoReq!) -> ImProto.Body.Builder {
        self.bdyUsersInfoReq = value
        return self
      }
      public func mergeBdyUsersInfoReq(value:ImProto.BdyUsersInfoReq) throws -> ImProto.Body.Builder {
        if builderResult.hasBdyUsersInfoReq {
          builderResult.bdyUsersInfoReq = try ImProto.BdyUsersInfoReq.builderWithPrototype(builderResult.bdyUsersInfoReq).mergeFrom(value).buildPartial()
        } else {
          builderResult.bdyUsersInfoReq = value
        }
        builderResult.hasBdyUsersInfoReq = true
        return self
      }
      public func clearBdyUsersInfoReq() -> ImProto.Body.Builder {
        bdyUsersInfoReqBuilder_ = nil
        builderResult.hasBdyUsersInfoReq = false
        builderResult.bdyUsersInfoReq = nil
        return self
      }
      public var hasBdyUsersInfoRes:Bool {
           get {
               return builderResult.hasBdyUsersInfoRes
           }
      }
      public var bdyUsersInfoRes:ImProto.BdyUsersInfoRes! {
           get {
               if bdyUsersInfoResBuilder_ != nil {
                  builderResult.bdyUsersInfoRes = bdyUsersInfoResBuilder_.getMessage()
               }
               return builderResult.bdyUsersInfoRes
           }
           set (value) {
               builderResult.hasBdyUsersInfoRes = true
               builderResult.bdyUsersInfoRes = value
           }
      }
      private var bdyUsersInfoResBuilder_:ImProto.BdyUsersInfoRes.Builder! {
           didSet {
              builderResult.hasBdyUsersInfoRes = true
           }
      }
      public func getBdyUsersInfoResBuilder() -> ImProto.BdyUsersInfoRes.Builder {
        if bdyUsersInfoResBuilder_ == nil {
           bdyUsersInfoResBuilder_ = ImProto.BdyUsersInfoRes.Builder()
           builderResult.bdyUsersInfoRes = bdyUsersInfoResBuilder_.getMessage()
           if bdyUsersInfoRes != nil {
              try! bdyUsersInfoResBuilder_.mergeFrom(bdyUsersInfoRes)
           }
        }
        return bdyUsersInfoResBuilder_
      }
      public func setBdyUsersInfoRes(value:ImProto.BdyUsersInfoRes!) -> ImProto.Body.Builder {
        self.bdyUsersInfoRes = value
        return self
      }
      public func mergeBdyUsersInfoRes(value:ImProto.BdyUsersInfoRes) throws -> ImProto.Body.Builder {
        if builderResult.hasBdyUsersInfoRes {
          builderResult.bdyUsersInfoRes = try ImProto.BdyUsersInfoRes.builderWithPrototype(builderResult.bdyUsersInfoRes).mergeFrom(value).buildPartial()
        } else {
          builderResult.bdyUsersInfoRes = value
        }
        builderResult.hasBdyUsersInfoRes = true
        return self
      }
      public func clearBdyUsersInfoRes() -> ImProto.Body.Builder {
        bdyUsersInfoResBuilder_ = nil
        builderResult.hasBdyUsersInfoRes = false
        builderResult.bdyUsersInfoRes = nil
        return self
      }
      public var hasBdyChangeUserRemarkReq:Bool {
           get {
               return builderResult.hasBdyChangeUserRemarkReq
           }
      }
      public var bdyChangeUserRemarkReq:ImProto.BdyChangeUserRemarkReq! {
           get {
               if bdyChangeUserRemarkReqBuilder_ != nil {
                  builderResult.bdyChangeUserRemarkReq = bdyChangeUserRemarkReqBuilder_.getMessage()
               }
               return builderResult.bdyChangeUserRemarkReq
           }
           set (value) {
               builderResult.hasBdyChangeUserRemarkReq = true
               builderResult.bdyChangeUserRemarkReq = value
           }
      }
      private var bdyChangeUserRemarkReqBuilder_:ImProto.BdyChangeUserRemarkReq.Builder! {
           didSet {
              builderResult.hasBdyChangeUserRemarkReq = true
           }
      }
      public func getBdyChangeUserRemarkReqBuilder() -> ImProto.BdyChangeUserRemarkReq.Builder {
        if bdyChangeUserRemarkReqBuilder_ == nil {
           bdyChangeUserRemarkReqBuilder_ = ImProto.BdyChangeUserRemarkReq.Builder()
           builderResult.bdyChangeUserRemarkReq = bdyChangeUserRemarkReqBuilder_.getMessage()
           if bdyChangeUserRemarkReq != nil {
              try! bdyChangeUserRemarkReqBuilder_.mergeFrom(bdyChangeUserRemarkReq)
           }
        }
        return bdyChangeUserRemarkReqBuilder_
      }
      public func setBdyChangeUserRemarkReq(value:ImProto.BdyChangeUserRemarkReq!) -> ImProto.Body.Builder {
        self.bdyChangeUserRemarkReq = value
        return self
      }
      public func mergeBdyChangeUserRemarkReq(value:ImProto.BdyChangeUserRemarkReq) throws -> ImProto.Body.Builder {
        if builderResult.hasBdyChangeUserRemarkReq {
          builderResult.bdyChangeUserRemarkReq = try ImProto.BdyChangeUserRemarkReq.builderWithPrototype(builderResult.bdyChangeUserRemarkReq).mergeFrom(value).buildPartial()
        } else {
          builderResult.bdyChangeUserRemarkReq = value
        }
        builderResult.hasBdyChangeUserRemarkReq = true
        return self
      }
      public func clearBdyChangeUserRemarkReq() -> ImProto.Body.Builder {
        bdyChangeUserRemarkReqBuilder_ = nil
        builderResult.hasBdyChangeUserRemarkReq = false
        builderResult.bdyChangeUserRemarkReq = nil
        return self
      }
      public var hasBdyListAck:Bool {
           get {
               return builderResult.hasBdyListAck
           }
      }
      public var bdyListAck:ImProto.BdyListAck! {
           get {
               if bdyListAckBuilder_ != nil {
                  builderResult.bdyListAck = bdyListAckBuilder_.getMessage()
               }
               return builderResult.bdyListAck
           }
           set (value) {
               builderResult.hasBdyListAck = true
               builderResult.bdyListAck = value
           }
      }
      private var bdyListAckBuilder_:ImProto.BdyListAck.Builder! {
           didSet {
              builderResult.hasBdyListAck = true
           }
      }
      public func getBdyListAckBuilder() -> ImProto.BdyListAck.Builder {
        if bdyListAckBuilder_ == nil {
           bdyListAckBuilder_ = ImProto.BdyListAck.Builder()
           builderResult.bdyListAck = bdyListAckBuilder_.getMessage()
           if bdyListAck != nil {
              try! bdyListAckBuilder_.mergeFrom(bdyListAck)
           }
        }
        return bdyListAckBuilder_
      }
      public func setBdyListAck(value:ImProto.BdyListAck!) -> ImProto.Body.Builder {
        self.bdyListAck = value
        return self
      }
      public func mergeBdyListAck(value:ImProto.BdyListAck) throws -> ImProto.Body.Builder {
        if builderResult.hasBdyListAck {
          builderResult.bdyListAck = try ImProto.BdyListAck.builderWithPrototype(builderResult.bdyListAck).mergeFrom(value).buildPartial()
        } else {
          builderResult.bdyListAck = value
        }
        builderResult.hasBdyListAck = true
        return self
      }
      public func clearBdyListAck() -> ImProto.Body.Builder {
        bdyListAckBuilder_ = nil
        builderResult.hasBdyListAck = false
        builderResult.bdyListAck = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.Body.Builder {
        builderResult = ImProto.Body()
        return self
      }
      public override func clone() throws -> ImProto.Body.Builder {
        return try ImProto.Body.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.Body {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.Body {
        let returnMe:ImProto.Body = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.Body) throws -> ImProto.Body.Builder {
        if other == ImProto.Body() {
         return self
        }
        if (other.hasMsgData) {
            try mergeMsgData(other.msgData)
        }
        if (other.hasMsgDataAck) {
            try mergeMsgDataAck(other.msgDataAck)
        }
        if (other.hasMsgDataReadAck) {
            try mergeMsgDataReadAck(other.msgDataReadAck)
        }
        if (other.hasLoginReqToken) {
            try mergeLoginReqToken(other.loginReqToken)
        }
        if (other.hasLoginResToken) {
            try mergeLoginResToken(other.loginResToken)
        }
        if (other.hasSysAck) {
            try mergeSysAck(other.sysAck)
        }
        if (other.hasSysOffConnect) {
            try mergeSysOffConnect(other.sysOffConnect)
        }
        if (other.hasSysNoRecordsPush) {
            try mergeSysNoRecordsPush(other.sysNoRecordsPush)
        }
        if (other.hasBdyAddBuddyReq) {
            try mergeBdyAddBuddyReq(other.bdyAddBuddyReq)
        }
        if (other.hasBdyAddBuddyRes) {
            try mergeBdyAddBuddyRes(other.bdyAddBuddyRes)
        }
        if (other.hasBdyDeleteBuddyReq) {
            try mergeBdyDeleteBuddyReq(other.bdyDeleteBuddyReq)
        }
        if (other.hasBdyUsersInfoReq) {
            try mergeBdyUsersInfoReq(other.bdyUsersInfoReq)
        }
        if (other.hasBdyUsersInfoRes) {
            try mergeBdyUsersInfoRes(other.bdyUsersInfoRes)
        }
        if (other.hasBdyChangeUserRemarkReq) {
            try mergeBdyChangeUserRemarkReq(other.bdyChangeUserRemarkReq)
        }
        if (other.hasBdyListAck) {
            try mergeBdyListAck(other.bdyListAck)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.Body.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.Body.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ImProto.MsgData.Builder = ImProto.MsgData.Builder()
            if hasMsgData {
              try subBuilder.mergeFrom(msgData)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            msgData = subBuilder.buildPartial()

          case 18 :
            let subBuilder:ImProto.MsgDataAck.Builder = ImProto.MsgDataAck.Builder()
            if hasMsgDataAck {
              try subBuilder.mergeFrom(msgDataAck)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            msgDataAck = subBuilder.buildPartial()

          case 26 :
            let subBuilder:ImProto.MsgDataReadAck.Builder = ImProto.MsgDataReadAck.Builder()
            if hasMsgDataReadAck {
              try subBuilder.mergeFrom(msgDataReadAck)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            msgDataReadAck = subBuilder.buildPartial()

          case 34 :
            let subBuilder:ImProto.LoginReqToken.Builder = ImProto.LoginReqToken.Builder()
            if hasLoginReqToken {
              try subBuilder.mergeFrom(loginReqToken)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            loginReqToken = subBuilder.buildPartial()

          case 42 :
            let subBuilder:ImProto.LoginResToken.Builder = ImProto.LoginResToken.Builder()
            if hasLoginResToken {
              try subBuilder.mergeFrom(loginResToken)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            loginResToken = subBuilder.buildPartial()

          case 50 :
            let subBuilder:ImProto.SysAck.Builder = ImProto.SysAck.Builder()
            if hasSysAck {
              try subBuilder.mergeFrom(sysAck)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sysAck = subBuilder.buildPartial()

          case 58 :
            let subBuilder:ImProto.SysOffConnect.Builder = ImProto.SysOffConnect.Builder()
            if hasSysOffConnect {
              try subBuilder.mergeFrom(sysOffConnect)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sysOffConnect = subBuilder.buildPartial()

          case 66 :
            let subBuilder:ImProto.SysNoRecordsPush.Builder = ImProto.SysNoRecordsPush.Builder()
            if hasSysNoRecordsPush {
              try subBuilder.mergeFrom(sysNoRecordsPush)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sysNoRecordsPush = subBuilder.buildPartial()

          case 74 :
            let subBuilder:ImProto.BdyAddBuddyReq.Builder = ImProto.BdyAddBuddyReq.Builder()
            if hasBdyAddBuddyReq {
              try subBuilder.mergeFrom(bdyAddBuddyReq)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            bdyAddBuddyReq = subBuilder.buildPartial()

          case 82 :
            let subBuilder:ImProto.BdyAddBuddyRes.Builder = ImProto.BdyAddBuddyRes.Builder()
            if hasBdyAddBuddyRes {
              try subBuilder.mergeFrom(bdyAddBuddyRes)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            bdyAddBuddyRes = subBuilder.buildPartial()

          case 90 :
            let subBuilder:ImProto.BdyDeleteBuddyReq.Builder = ImProto.BdyDeleteBuddyReq.Builder()
            if hasBdyDeleteBuddyReq {
              try subBuilder.mergeFrom(bdyDeleteBuddyReq)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            bdyDeleteBuddyReq = subBuilder.buildPartial()

          case 98 :
            let subBuilder:ImProto.BdyUsersInfoReq.Builder = ImProto.BdyUsersInfoReq.Builder()
            if hasBdyUsersInfoReq {
              try subBuilder.mergeFrom(bdyUsersInfoReq)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            bdyUsersInfoReq = subBuilder.buildPartial()

          case 106 :
            let subBuilder:ImProto.BdyUsersInfoRes.Builder = ImProto.BdyUsersInfoRes.Builder()
            if hasBdyUsersInfoRes {
              try subBuilder.mergeFrom(bdyUsersInfoRes)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            bdyUsersInfoRes = subBuilder.buildPartial()

          case 114 :
            let subBuilder:ImProto.BdyChangeUserRemarkReq.Builder = ImProto.BdyChangeUserRemarkReq.Builder()
            if hasBdyChangeUserRemarkReq {
              try subBuilder.mergeFrom(bdyChangeUserRemarkReq)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            bdyChangeUserRemarkReq = subBuilder.buildPartial()

          case 802 :
            let subBuilder:ImProto.BdyListAck.Builder = ImProto.BdyListAck.Builder()
            if hasBdyListAck {
              try subBuilder.mergeFrom(bdyListAck)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            bdyListAck = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
