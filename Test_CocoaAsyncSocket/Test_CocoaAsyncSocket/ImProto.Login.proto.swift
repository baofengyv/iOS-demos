// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Login.proto

import Foundation
import ProtocolBuffers


public extension ImProto{}

public func == (lhs: ImProto.LoginReqToken, rhs: ImProto.LoginReqToken) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.LoginResToken, rhs: ImProto.LoginResToken) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResultType == rhs.hasResultType) && (!lhs.hasResultType || lhs.resultType == rhs.resultType)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension ImProto {
  public struct LoginRoot {
    public static var sharedInstance : LoginRoot {
     struct Static {
         static let instance : LoginRoot = LoginRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ImProto.BaseDefineRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  //token验证消息
  final public class LoginReqToken : GeneratedMessage, GeneratedMessageProtocol {
    //用户token
    public private(set) var token:String = ""

    public private(set) var hasToken:Bool = false
    //用户ID
    public private(set) var userId:String = ""

    public private(set) var hasUserId:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasToken {
        return false
      }
      if !hasUserId {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasToken {
        try output.writeString(1, value:token)
      }
      if hasUserId {
        try output.writeString(2, value:userId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasToken {
        serialize_size += token.computeStringSize(1)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.LoginReqToken> {
      var mergedArray = Array<ImProto.LoginReqToken>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.LoginReqToken? {
      return try ImProto.LoginReqToken.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.LoginReqToken {
      return try ImProto.LoginReqToken.Builder().mergeFromData(data, extensionRegistry:ImProto.LoginRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.LoginReqToken {
      return try ImProto.LoginReqToken.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.LoginReqToken {
      return try ImProto.LoginReqToken.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.LoginReqToken {
      return try ImProto.LoginReqToken.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.LoginReqToken {
      return try ImProto.LoginReqToken.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.LoginReqToken {
      return try ImProto.LoginReqToken.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.LoginReqToken.Builder {
      return ImProto.LoginReqToken.classBuilder() as! ImProto.LoginReqToken.Builder
    }
    public func getBuilder() -> ImProto.LoginReqToken.Builder {
      return classBuilder() as! ImProto.LoginReqToken.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.LoginReqToken.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.LoginReqToken.Builder()
    }
    public func toBuilder() throws -> ImProto.LoginReqToken.Builder {
      return try ImProto.LoginReqToken.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.LoginReqToken) throws -> ImProto.LoginReqToken.Builder {
      return try ImProto.LoginReqToken.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasToken {
        output += "\(indent) token: \(token) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasToken {
               hashCode = (hashCode &* 31) &+ token.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.LoginReqToken"
    }
    override public func className() -> String {
        return "ImProto.LoginReqToken"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.LoginReqToken.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.LoginReqToken = ImProto.LoginReqToken()
      public func getMessage() -> ImProto.LoginReqToken {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasToken:Bool {
           get {
                return builderResult.hasToken
           }
      }
      public var token:String {
           get {
                return builderResult.token
           }
           set (value) {
               builderResult.hasToken = true
               builderResult.token = value
           }
      }
      public func setToken(value:String) -> ImProto.LoginReqToken.Builder {
        self.token = value
        return self
      }
      public func clearToken() -> ImProto.LoginReqToken.Builder{
           builderResult.hasToken = false
           builderResult.token = ""
           return self
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> ImProto.LoginReqToken.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> ImProto.LoginReqToken.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.LoginReqToken.Builder {
        builderResult = ImProto.LoginReqToken()
        return self
      }
      public override func clone() throws -> ImProto.LoginReqToken.Builder {
        return try ImProto.LoginReqToken.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.LoginReqToken {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.LoginReqToken {
        let returnMe:ImProto.LoginReqToken = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.LoginReqToken) throws -> ImProto.LoginReqToken.Builder {
        if other == ImProto.LoginReqToken() {
         return self
        }
        if other.hasToken {
             token = other.token
        }
        if other.hasUserId {
             userId = other.userId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.LoginReqToken.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.LoginReqToken.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            token = try input.readString()

          case 18 :
            userId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // 发送信息
  final public class LoginResToken : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var resultType:ImProto.TokenResultType = ImProto.TokenResultType.TokenInValid
    public private(set) var hasResultType:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasResultType {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResultType {
        try output.writeEnum(1, value:resultType.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasResultType) {
        serialize_size += resultType.rawValue.computeEnumSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.LoginResToken> {
      var mergedArray = Array<ImProto.LoginResToken>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.LoginResToken? {
      return try ImProto.LoginResToken.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.LoginResToken {
      return try ImProto.LoginResToken.Builder().mergeFromData(data, extensionRegistry:ImProto.LoginRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.LoginResToken {
      return try ImProto.LoginResToken.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.LoginResToken {
      return try ImProto.LoginResToken.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.LoginResToken {
      return try ImProto.LoginResToken.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.LoginResToken {
      return try ImProto.LoginResToken.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.LoginResToken {
      return try ImProto.LoginResToken.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.LoginResToken.Builder {
      return ImProto.LoginResToken.classBuilder() as! ImProto.LoginResToken.Builder
    }
    public func getBuilder() -> ImProto.LoginResToken.Builder {
      return classBuilder() as! ImProto.LoginResToken.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.LoginResToken.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.LoginResToken.Builder()
    }
    public func toBuilder() throws -> ImProto.LoginResToken.Builder {
      return try ImProto.LoginResToken.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.LoginResToken) throws -> ImProto.LoginResToken.Builder {
      return try ImProto.LoginResToken.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if (hasResultType) {
        output += "\(indent) resultType: \(resultType.description)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResultType {
               hashCode = (hashCode &* 31) &+ Int(resultType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.LoginResToken"
    }
    override public func className() -> String {
        return "ImProto.LoginResToken"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.LoginResToken.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.LoginResToken = ImProto.LoginResToken()
      public func getMessage() -> ImProto.LoginResToken {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasResultType:Bool{
            get {
                return builderResult.hasResultType
            }
        }
        public var resultType:ImProto.TokenResultType {
            get {
                return builderResult.resultType
            }
            set (value) {
                builderResult.hasResultType = true
                builderResult.resultType = value
            }
        }
        public func setResultType(value:ImProto.TokenResultType) -> ImProto.LoginResToken.Builder {
          self.resultType = value
          return self
        }
        public func clearResultType() -> ImProto.LoginResToken.Builder {
           builderResult.hasResultType = false
           builderResult.resultType = .TokenInValid
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.LoginResToken.Builder {
        builderResult = ImProto.LoginResToken()
        return self
      }
      public override func clone() throws -> ImProto.LoginResToken.Builder {
        return try ImProto.LoginResToken.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.LoginResToken {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.LoginResToken {
        let returnMe:ImProto.LoginResToken = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.LoginResToken) throws -> ImProto.LoginResToken.Builder {
        if other == ImProto.LoginResToken() {
         return self
        }
        if other.hasResultType {
             resultType = other.resultType
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.LoginResToken.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.LoginResToken.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueIntresultType = try input.readEnum()
            if let enumsresultType = ImProto.TokenResultType(rawValue:valueIntresultType){
                 resultType = enumsresultType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntresultType))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
