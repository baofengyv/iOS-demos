// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file BaseDefine.proto

import Foundation
import ProtocolBuffers


public struct ImProto { }

public func == (lhs: ImProto.MapFieldEntry, rhs: ImProto.MapFieldEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.ContactSessionInfo, rhs: ImProto.ContactSessionInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSessionId == rhs.hasSessionId) && (!lhs.hasSessionId || lhs.sessionId == rhs.sessionId)
  fieldCheck = fieldCheck && (lhs.hasSessionType == rhs.hasSessionType) && (!lhs.hasSessionType || lhs.sessionType == rhs.sessionType)
  fieldCheck = fieldCheck && (lhs.hasUpdatedTime == rhs.hasUpdatedTime) && (!lhs.hasUpdatedTime || lhs.updatedTime == rhs.updatedTime)
  fieldCheck = fieldCheck && (lhs.hasLatestMsgId == rhs.hasLatestMsgId) && (!lhs.hasLatestMsgId || lhs.latestMsgId == rhs.latestMsgId)
  fieldCheck = fieldCheck && (lhs.hasLatestMsgData == rhs.hasLatestMsgData) && (!lhs.hasLatestMsgData || lhs.latestMsgData == rhs.latestMsgData)
  fieldCheck = fieldCheck && (lhs.hasLatestMsgType == rhs.hasLatestMsgType) && (!lhs.hasLatestMsgType || lhs.latestMsgType == rhs.latestMsgType)
  fieldCheck = fieldCheck && (lhs.hasLatestMsgFromUserId == rhs.hasLatestMsgFromUserId) && (!lhs.hasLatestMsgFromUserId || lhs.latestMsgFromUserId == rhs.latestMsgFromUserId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.UserInfo, rhs: ImProto.UserInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasSex == rhs.hasSex) && (!lhs.hasSex || lhs.sex == rhs.sex)
  fieldCheck = fieldCheck && (lhs.hasNickName == rhs.hasNickName) && (!lhs.hasNickName || lhs.nickName == rhs.nickName)
  fieldCheck = fieldCheck && (lhs.hasModifyTime == rhs.hasModifyTime) && (!lhs.hasModifyTime || lhs.modifyTime == rhs.modifyTime)
  fieldCheck = fieldCheck && (lhs.hasAccount == rhs.hasAccount) && (!lhs.hasAccount || lhs.account == rhs.account)
  fieldCheck = fieldCheck && (lhs.reduns == rhs.reduns)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ImProto.UserStat, rhs: ImProto.UserStat) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension ImProto {
  public struct BaseDefineRoot {
    public static var sharedInstance : BaseDefineRoot {
     struct Static {
         static let instance : BaseDefineRoot = BaseDefineRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  // MessageType
  public enum MessageTypeId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    // 短消息类型
    case SidMsg = 1

    // 群组消息类型
    case SidGroup = 2

    // 文件消息类型
    case SidFile = 3

    // 心跳
    case SidPingPang = 4

    // 登入
    case SidLogin = 5

    // 系统
    case SidSys = 6

    // 好友列表
    case SidBuddyList = 7

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .SidMsg: return ".SidMsg"
            case .SidGroup: return ".SidGroup"
            case .SidFile: return ".SidFile"
            case .SidPingPang: return ".SidPingPang"
            case .SidLogin: return ".SidLogin"
            case .SidSys: return ".SidSys"
            case .SidBuddyList: return ".SidBuddyList"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  // 消息类型命令
  public enum MsgCmdId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    // 消息内容
    case CidMsgData = 257

    // 消息接收回执
    case CidMsgDataAck = 258

    // 消息阅读回执
    case CidMsgReadAck = 259

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .CidMsgData: return ".CidMsgData"
            case .CidMsgDataAck: return ".CidMsgDataAck"
            case .CidMsgReadAck: return ".CidMsgReadAck"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  //登录消息分类
  public enum LoginCmdId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    //获取新TOKEN请求
    case CidLoginReqDevicetoken = 1281

    //获取新TOKEN回执
    case CidLoginResDevicetoken = 1282
    case CidLoginReqPushShield = 1283
    case CidLoginResPushShield = 1284
    case CidLoginReqQueryPushShield = 1285
    case CidLoginResQueryPushShield = 1286

    //连接token验证
    case CidLoginReqToken = 1287

    //连接token验证回执
    case CidLoginResToken = 1288

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .CidLoginReqDevicetoken: return ".CidLoginReqDevicetoken"
            case .CidLoginResDevicetoken: return ".CidLoginResDevicetoken"
            case .CidLoginReqPushShield: return ".CidLoginReqPushShield"
            case .CidLoginResPushShield: return ".CidLoginResPushShield"
            case .CidLoginReqQueryPushShield: return ".CidLoginReqQueryPushShield"
            case .CidLoginResQueryPushShield: return ".CidLoginResQueryPushShield"
            case .CidLoginReqToken: return ".CidLoginReqToken"
            case .CidLoginResToken: return ".CidLoginResToken"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  // 系统消息
  public enum SysCmdId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    // 系统自动同步回执
    case CidSysAck = 1537

    // 用户长连接断掉请求
    case CidSysOffConnect = 1538

    // 用户建立连接后主动推送未成功信息
    case CidNoRecordsPush = 1539

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .CidSysAck: return ".CidSysAck"
            case .CidSysOffConnect: return ".CidSysOffConnect"
            case .CidNoRecordsPush: return ".CidNoRecordsPush"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  // 消息类型
  public enum MsgType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    //文本消息
    case MsgTypeSingleText = 1

    //语音
    case MsgTypeSingleAudio = 2
    case MsgTypeGroupText = 17
    case MsgTypeGroupAudio = 18

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .MsgTypeSingleText: return ".MsgTypeSingleText"
            case .MsgTypeSingleAudio: return ".MsgTypeSingleAudio"
            case .MsgTypeGroupText: return ".MsgTypeGroupText"
            case .MsgTypeGroupAudio: return ".MsgTypeGroupAudio"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  //会话类型
  public enum SessionType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    //单个用户会话
    case SessionTypeSingle = 1

    //群会话
    case SessionTypeGroup = 2

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .SessionTypeSingle: return ".SessionTypeSingle"
            case .SessionTypeGroup: return ".SessionTypeGroup"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum FriendType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    //个人好友
    case FriendTypeSingle = 0

    //群
    case FriendTypeGroup = 1

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .FriendTypeSingle: return ".FriendTypeSingle"
            case .FriendTypeGroup: return ".FriendTypeGroup"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum TokenResultType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    // TOKEN验证失败
    case TokenInValid = 1

    // 未发送TOKEN验证消息
    case TokenNoSend = 2

    // TOKEN验证成功
    case TokenSuccess = 3

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .TokenInValid: return ".TokenInValid"
            case .TokenNoSend: return ".TokenNoSend"
            case .TokenSuccess: return ".TokenSuccess"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  // command id for buddy list
  public enum BuddyListCmdId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    //申请添加好友
    case CidBuddyListAddBuddyRequest = 513

    //申请添加好友回执
    case CidBuddyListAddBuddyResponse = 514

    //删除好友
    case CidBuddyListDeleteBuddyRequest = 515

    //获取好友信息
    case CidBuddyListUserInfoRequest = 516

    //回执
    case CidBuddyListUserInfoResponse = 517

    //获取好友状态
    case CidBuddyListUsersStatusRequest = 518

    //回执
    case CidBuddyListUsersStatusResponse = 519

    //头像更改通知
    case CidBuddyListAvatarChangedNotify = 520

    //修改个性签名请求
    case CidBuddyListChangeSignInfoRequest = 521

    //回执
    case CidBuddyListChangeSignInfoResponse = 522

    //签名修改通知
    case CidBuddyListSignInfoChangedNotify = 523

    //好友列表回执
    case CidBuddyListAck = 524

    //修改好友备注
    case CidBuddyListChangeUserRemarkRequest = 525

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .CidBuddyListAddBuddyRequest: return ".CidBuddyListAddBuddyRequest"
            case .CidBuddyListAddBuddyResponse: return ".CidBuddyListAddBuddyResponse"
            case .CidBuddyListDeleteBuddyRequest: return ".CidBuddyListDeleteBuddyRequest"
            case .CidBuddyListUserInfoRequest: return ".CidBuddyListUserInfoRequest"
            case .CidBuddyListUserInfoResponse: return ".CidBuddyListUserInfoResponse"
            case .CidBuddyListUsersStatusRequest: return ".CidBuddyListUsersStatusRequest"
            case .CidBuddyListUsersStatusResponse: return ".CidBuddyListUsersStatusResponse"
            case .CidBuddyListAvatarChangedNotify: return ".CidBuddyListAvatarChangedNotify"
            case .CidBuddyListChangeSignInfoRequest: return ".CidBuddyListChangeSignInfoRequest"
            case .CidBuddyListChangeSignInfoResponse: return ".CidBuddyListChangeSignInfoResponse"
            case .CidBuddyListSignInfoChangedNotify: return ".CidBuddyListSignInfoChangedNotify"
            case .CidBuddyListAck: return ".CidBuddyListAck"
            case .CidBuddyListChangeUserRemarkRequest: return ".CidBuddyListChangeUserRemarkRequest"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum UserStatType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case UserStatusOnline = 1
    case UserStatusOffline = 2
    case UserStatusLeave = 3

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .UserStatusOnline: return ".UserStatusOnline"
            case .UserStatusOffline: return ".UserStatusOffline"
            case .UserStatusLeave: return ".UserStatusLeave"
        }
    }
  }

  //Enum type declaration end 

  //类型map扩展字段
  final public class MapFieldEntry : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var key:String = ""

    public private(set) var hasKey:Bool = false
    public private(set) var value:String = ""

    public private(set) var hasValue:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasKey {
        return false
      }
      if !hasValue {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasKey {
        try output.writeString(1, value:key)
      }
      if hasValue {
        try output.writeString(2, value:value)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasKey {
        serialize_size += key.computeStringSize(1)
      }
      if hasValue {
        serialize_size += value.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.MapFieldEntry> {
      var mergedArray = Array<ImProto.MapFieldEntry>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.MapFieldEntry? {
      return try ImProto.MapFieldEntry.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.MapFieldEntry {
      return try ImProto.MapFieldEntry.Builder().mergeFromData(data, extensionRegistry:ImProto.BaseDefineRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.MapFieldEntry {
      return try ImProto.MapFieldEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.MapFieldEntry {
      return try ImProto.MapFieldEntry.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MapFieldEntry {
      return try ImProto.MapFieldEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.MapFieldEntry {
      return try ImProto.MapFieldEntry.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MapFieldEntry {
      return try ImProto.MapFieldEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.MapFieldEntry.Builder {
      return ImProto.MapFieldEntry.classBuilder() as! ImProto.MapFieldEntry.Builder
    }
    public func getBuilder() -> ImProto.MapFieldEntry.Builder {
      return classBuilder() as! ImProto.MapFieldEntry.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.MapFieldEntry.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.MapFieldEntry.Builder()
    }
    public func toBuilder() throws -> ImProto.MapFieldEntry.Builder {
      return try ImProto.MapFieldEntry.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.MapFieldEntry) throws -> ImProto.MapFieldEntry.Builder {
      return try ImProto.MapFieldEntry.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.MapFieldEntry"
    }
    override public func className() -> String {
        return "ImProto.MapFieldEntry"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.MapFieldEntry.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.MapFieldEntry = ImProto.MapFieldEntry()
      public func getMessage() -> ImProto.MapFieldEntry {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasKey:Bool {
           get {
                return builderResult.hasKey
           }
      }
      public var key:String {
           get {
                return builderResult.key
           }
           set (value) {
               builderResult.hasKey = true
               builderResult.key = value
           }
      }
      public func setKey(value:String) -> ImProto.MapFieldEntry.Builder {
        self.key = value
        return self
      }
      public func clearKey() -> ImProto.MapFieldEntry.Builder{
           builderResult.hasKey = false
           builderResult.key = ""
           return self
      }
      public var hasValue:Bool {
           get {
                return builderResult.hasValue
           }
      }
      public var value:String {
           get {
                return builderResult.value
           }
           set (value) {
               builderResult.hasValue = true
               builderResult.value = value
           }
      }
      public func setValue(value:String) -> ImProto.MapFieldEntry.Builder {
        self.value = value
        return self
      }
      public func clearValue() -> ImProto.MapFieldEntry.Builder{
           builderResult.hasValue = false
           builderResult.value = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.MapFieldEntry.Builder {
        builderResult = ImProto.MapFieldEntry()
        return self
      }
      public override func clone() throws -> ImProto.MapFieldEntry.Builder {
        return try ImProto.MapFieldEntry.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.MapFieldEntry {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.MapFieldEntry {
        let returnMe:ImProto.MapFieldEntry = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.MapFieldEntry) throws -> ImProto.MapFieldEntry.Builder {
        if other == ImProto.MapFieldEntry() {
         return self
        }
        if other.hasKey {
             key = other.key
        }
        if other.hasValue {
             value = other.value
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.MapFieldEntry.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.MapFieldEntry.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            key = try input.readString()

          case 18 :
            value = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //聊天会话
  final public class ContactSessionInfo : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var sessionId:String = ""

    public private(set) var hasSessionId:Bool = false
    public private(set) var sessionType:ImProto.SessionType = ImProto.SessionType.SessionTypeSingle
    public private(set) var hasSessionType:Bool = false
    public private(set) var updatedTime:UInt64 = UInt64(0)

    public private(set) var hasUpdatedTime:Bool = false
    public private(set) var latestMsgId:UInt32 = UInt32(0)

    public private(set) var hasLatestMsgId:Bool = false
    public private(set) var latestMsgData:NSData = NSData()

    public private(set) var hasLatestMsgData:Bool = false
    public private(set) var latestMsgType:ImProto.MsgType = ImProto.MsgType.MsgTypeSingleText
    public private(set) var hasLatestMsgType:Bool = false
    public private(set) var latestMsgFromUserId:String = ""

    public private(set) var hasLatestMsgFromUserId:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasSessionId {
        return false
      }
      if !hasSessionType {
        return false
      }
      if !hasUpdatedTime {
        return false
      }
      if !hasLatestMsgId {
        return false
      }
      if !hasLatestMsgData {
        return false
      }
      if !hasLatestMsgType {
        return false
      }
      if !hasLatestMsgFromUserId {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSessionId {
        try output.writeString(1, value:sessionId)
      }
      if hasSessionType {
        try output.writeEnum(2, value:sessionType.rawValue)
      }
      if hasUpdatedTime {
        try output.writeUInt64(3, value:updatedTime)
      }
      if hasLatestMsgId {
        try output.writeUInt32(4, value:latestMsgId)
      }
      if hasLatestMsgData {
        try output.writeData(5, value:latestMsgData)
      }
      if hasLatestMsgType {
        try output.writeEnum(6, value:latestMsgType.rawValue)
      }
      if hasLatestMsgFromUserId {
        try output.writeString(7, value:latestMsgFromUserId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSessionId {
        serialize_size += sessionId.computeStringSize(1)
      }
      if (hasSessionType) {
        serialize_size += sessionType.rawValue.computeEnumSize(2)
      }
      if hasUpdatedTime {
        serialize_size += updatedTime.computeUInt64Size(3)
      }
      if hasLatestMsgId {
        serialize_size += latestMsgId.computeUInt32Size(4)
      }
      if hasLatestMsgData {
        serialize_size += latestMsgData.computeDataSize(5)
      }
      if (hasLatestMsgType) {
        serialize_size += latestMsgType.rawValue.computeEnumSize(6)
      }
      if hasLatestMsgFromUserId {
        serialize_size += latestMsgFromUserId.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.ContactSessionInfo> {
      var mergedArray = Array<ImProto.ContactSessionInfo>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.ContactSessionInfo? {
      return try ImProto.ContactSessionInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.ContactSessionInfo {
      return try ImProto.ContactSessionInfo.Builder().mergeFromData(data, extensionRegistry:ImProto.BaseDefineRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.ContactSessionInfo {
      return try ImProto.ContactSessionInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.ContactSessionInfo {
      return try ImProto.ContactSessionInfo.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.ContactSessionInfo {
      return try ImProto.ContactSessionInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.ContactSessionInfo {
      return try ImProto.ContactSessionInfo.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.ContactSessionInfo {
      return try ImProto.ContactSessionInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.ContactSessionInfo.Builder {
      return ImProto.ContactSessionInfo.classBuilder() as! ImProto.ContactSessionInfo.Builder
    }
    public func getBuilder() -> ImProto.ContactSessionInfo.Builder {
      return classBuilder() as! ImProto.ContactSessionInfo.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.ContactSessionInfo.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.ContactSessionInfo.Builder()
    }
    public func toBuilder() throws -> ImProto.ContactSessionInfo.Builder {
      return try ImProto.ContactSessionInfo.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.ContactSessionInfo) throws -> ImProto.ContactSessionInfo.Builder {
      return try ImProto.ContactSessionInfo.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasSessionId {
        output += "\(indent) sessionId: \(sessionId) \n"
      }
      if (hasSessionType) {
        output += "\(indent) sessionType: \(sessionType.description)\n"
      }
      if hasUpdatedTime {
        output += "\(indent) updatedTime: \(updatedTime) \n"
      }
      if hasLatestMsgId {
        output += "\(indent) latestMsgId: \(latestMsgId) \n"
      }
      if hasLatestMsgData {
        output += "\(indent) latestMsgData: \(latestMsgData) \n"
      }
      if (hasLatestMsgType) {
        output += "\(indent) latestMsgType: \(latestMsgType.description)\n"
      }
      if hasLatestMsgFromUserId {
        output += "\(indent) latestMsgFromUserId: \(latestMsgFromUserId) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSessionId {
               hashCode = (hashCode &* 31) &+ sessionId.hashValue
            }
            if hasSessionType {
               hashCode = (hashCode &* 31) &+ Int(sessionType.rawValue)
            }
            if hasUpdatedTime {
               hashCode = (hashCode &* 31) &+ updatedTime.hashValue
            }
            if hasLatestMsgId {
               hashCode = (hashCode &* 31) &+ latestMsgId.hashValue
            }
            if hasLatestMsgData {
               hashCode = (hashCode &* 31) &+ latestMsgData.hashValue
            }
            if hasLatestMsgType {
               hashCode = (hashCode &* 31) &+ Int(latestMsgType.rawValue)
            }
            if hasLatestMsgFromUserId {
               hashCode = (hashCode &* 31) &+ latestMsgFromUserId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.ContactSessionInfo"
    }
    override public func className() -> String {
        return "ImProto.ContactSessionInfo"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.ContactSessionInfo.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.ContactSessionInfo = ImProto.ContactSessionInfo()
      public func getMessage() -> ImProto.ContactSessionInfo {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSessionId:Bool {
           get {
                return builderResult.hasSessionId
           }
      }
      public var sessionId:String {
           get {
                return builderResult.sessionId
           }
           set (value) {
               builderResult.hasSessionId = true
               builderResult.sessionId = value
           }
      }
      public func setSessionId(value:String) -> ImProto.ContactSessionInfo.Builder {
        self.sessionId = value
        return self
      }
      public func clearSessionId() -> ImProto.ContactSessionInfo.Builder{
           builderResult.hasSessionId = false
           builderResult.sessionId = ""
           return self
      }
        public var hasSessionType:Bool{
            get {
                return builderResult.hasSessionType
            }
        }
        public var sessionType:ImProto.SessionType {
            get {
                return builderResult.sessionType
            }
            set (value) {
                builderResult.hasSessionType = true
                builderResult.sessionType = value
            }
        }
        public func setSessionType(value:ImProto.SessionType) -> ImProto.ContactSessionInfo.Builder {
          self.sessionType = value
          return self
        }
        public func clearSessionType() -> ImProto.ContactSessionInfo.Builder {
           builderResult.hasSessionType = false
           builderResult.sessionType = .SessionTypeSingle
           return self
        }
      public var hasUpdatedTime:Bool {
           get {
                return builderResult.hasUpdatedTime
           }
      }
      public var updatedTime:UInt64 {
           get {
                return builderResult.updatedTime
           }
           set (value) {
               builderResult.hasUpdatedTime = true
               builderResult.updatedTime = value
           }
      }
      public func setUpdatedTime(value:UInt64) -> ImProto.ContactSessionInfo.Builder {
        self.updatedTime = value
        return self
      }
      public func clearUpdatedTime() -> ImProto.ContactSessionInfo.Builder{
           builderResult.hasUpdatedTime = false
           builderResult.updatedTime = UInt64(0)
           return self
      }
      public var hasLatestMsgId:Bool {
           get {
                return builderResult.hasLatestMsgId
           }
      }
      public var latestMsgId:UInt32 {
           get {
                return builderResult.latestMsgId
           }
           set (value) {
               builderResult.hasLatestMsgId = true
               builderResult.latestMsgId = value
           }
      }
      public func setLatestMsgId(value:UInt32) -> ImProto.ContactSessionInfo.Builder {
        self.latestMsgId = value
        return self
      }
      public func clearLatestMsgId() -> ImProto.ContactSessionInfo.Builder{
           builderResult.hasLatestMsgId = false
           builderResult.latestMsgId = UInt32(0)
           return self
      }
      public var hasLatestMsgData:Bool {
           get {
                return builderResult.hasLatestMsgData
           }
      }
      public var latestMsgData:NSData {
           get {
                return builderResult.latestMsgData
           }
           set (value) {
               builderResult.hasLatestMsgData = true
               builderResult.latestMsgData = value
           }
      }
      public func setLatestMsgData(value:NSData) -> ImProto.ContactSessionInfo.Builder {
        self.latestMsgData = value
        return self
      }
      public func clearLatestMsgData() -> ImProto.ContactSessionInfo.Builder{
           builderResult.hasLatestMsgData = false
           builderResult.latestMsgData = NSData()
           return self
      }
        public var hasLatestMsgType:Bool{
            get {
                return builderResult.hasLatestMsgType
            }
        }
        public var latestMsgType:ImProto.MsgType {
            get {
                return builderResult.latestMsgType
            }
            set (value) {
                builderResult.hasLatestMsgType = true
                builderResult.latestMsgType = value
            }
        }
        public func setLatestMsgType(value:ImProto.MsgType) -> ImProto.ContactSessionInfo.Builder {
          self.latestMsgType = value
          return self
        }
        public func clearLatestMsgType() -> ImProto.ContactSessionInfo.Builder {
           builderResult.hasLatestMsgType = false
           builderResult.latestMsgType = .MsgTypeSingleText
           return self
        }
      public var hasLatestMsgFromUserId:Bool {
           get {
                return builderResult.hasLatestMsgFromUserId
           }
      }
      public var latestMsgFromUserId:String {
           get {
                return builderResult.latestMsgFromUserId
           }
           set (value) {
               builderResult.hasLatestMsgFromUserId = true
               builderResult.latestMsgFromUserId = value
           }
      }
      public func setLatestMsgFromUserId(value:String) -> ImProto.ContactSessionInfo.Builder {
        self.latestMsgFromUserId = value
        return self
      }
      public func clearLatestMsgFromUserId() -> ImProto.ContactSessionInfo.Builder{
           builderResult.hasLatestMsgFromUserId = false
           builderResult.latestMsgFromUserId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.ContactSessionInfo.Builder {
        builderResult = ImProto.ContactSessionInfo()
        return self
      }
      public override func clone() throws -> ImProto.ContactSessionInfo.Builder {
        return try ImProto.ContactSessionInfo.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.ContactSessionInfo {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.ContactSessionInfo {
        let returnMe:ImProto.ContactSessionInfo = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.ContactSessionInfo) throws -> ImProto.ContactSessionInfo.Builder {
        if other == ImProto.ContactSessionInfo() {
         return self
        }
        if other.hasSessionId {
             sessionId = other.sessionId
        }
        if other.hasSessionType {
             sessionType = other.sessionType
        }
        if other.hasUpdatedTime {
             updatedTime = other.updatedTime
        }
        if other.hasLatestMsgId {
             latestMsgId = other.latestMsgId
        }
        if other.hasLatestMsgData {
             latestMsgData = other.latestMsgData
        }
        if other.hasLatestMsgType {
             latestMsgType = other.latestMsgType
        }
        if other.hasLatestMsgFromUserId {
             latestMsgFromUserId = other.latestMsgFromUserId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.ContactSessionInfo.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.ContactSessionInfo.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            sessionId = try input.readString()

          case 16 :
            let valueIntsessionType = try input.readEnum()
            if let enumssessionType = ImProto.SessionType(rawValue:valueIntsessionType){
                 sessionType = enumssessionType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntsessionType))
            }

          case 24 :
            updatedTime = try input.readUInt64()

          case 32 :
            latestMsgId = try input.readUInt32()

          case 42 :
            latestMsgData = try input.readData()

          case 48 :
            let valueIntlatestMsgType = try input.readEnum()
            if let enumslatestMsgType = ImProto.MsgType(rawValue:valueIntlatestMsgType){
                 latestMsgType = enumslatestMsgType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntlatestMsgType))
            }

          case 58 :
            latestMsgFromUserId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //用户信息
  final public class UserInfo : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userId:String = ""

    public private(set) var hasUserId:Bool = false
    // 用户性别,男：1 女：2 人妖/外星人：0
    public private(set) var sex:String = ""

    public private(set) var hasSex:Bool = false
    //绰号
    public private(set) var nickName:String = ""

    public private(set) var hasNickName:Bool = false
    //头像地址
    public private(set) var modifyTime:String = ""

    public private(set) var hasModifyTime:Bool = false
    //帐号
    public private(set) var account:String = ""

    public private(set) var hasAccount:Bool = false
    public private(set) var reduns:Array<ImProto.MapFieldEntry>  = Array<ImProto.MapFieldEntry>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasUserId {
        return false
      }
      var isInitreduns:Bool = true
      for oneElementreduns in reduns {
          if (!oneElementreduns.isInitialized()) {
              isInitreduns = false
              break 
          }
      }
      if !isInitreduns {
       return isInitreduns
       }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUserId {
        try output.writeString(1, value:userId)
      }
      if hasSex {
        try output.writeString(2, value:sex)
      }
      if hasNickName {
        try output.writeString(3, value:nickName)
      }
      if hasModifyTime {
        try output.writeString(4, value:modifyTime)
      }
      if hasAccount {
        try output.writeString(5, value:account)
      }
      for oneElementreduns in reduns {
          try output.writeMessage(6, value:oneElementreduns)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUserId {
        serialize_size += userId.computeStringSize(1)
      }
      if hasSex {
        serialize_size += sex.computeStringSize(2)
      }
      if hasNickName {
        serialize_size += nickName.computeStringSize(3)
      }
      if hasModifyTime {
        serialize_size += modifyTime.computeStringSize(4)
      }
      if hasAccount {
        serialize_size += account.computeStringSize(5)
      }
      for oneElementreduns in reduns {
          serialize_size += oneElementreduns.computeMessageSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.UserInfo> {
      var mergedArray = Array<ImProto.UserInfo>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.UserInfo? {
      return try ImProto.UserInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.UserInfo {
      return try ImProto.UserInfo.Builder().mergeFromData(data, extensionRegistry:ImProto.BaseDefineRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.UserInfo {
      return try ImProto.UserInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.UserInfo {
      return try ImProto.UserInfo.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.UserInfo {
      return try ImProto.UserInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.UserInfo {
      return try ImProto.UserInfo.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.UserInfo {
      return try ImProto.UserInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.UserInfo.Builder {
      return ImProto.UserInfo.classBuilder() as! ImProto.UserInfo.Builder
    }
    public func getBuilder() -> ImProto.UserInfo.Builder {
      return classBuilder() as! ImProto.UserInfo.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.UserInfo.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.UserInfo.Builder()
    }
    public func toBuilder() throws -> ImProto.UserInfo.Builder {
      return try ImProto.UserInfo.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.UserInfo) throws -> ImProto.UserInfo.Builder {
      return try ImProto.UserInfo.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasSex {
        output += "\(indent) sex: \(sex) \n"
      }
      if hasNickName {
        output += "\(indent) nickName: \(nickName) \n"
      }
      if hasModifyTime {
        output += "\(indent) modifyTime: \(modifyTime) \n"
      }
      if hasAccount {
        output += "\(indent) account: \(account) \n"
      }
      var redunsElementIndex:Int = 0
      for oneElementreduns in reduns {
          output += "\(indent) reduns[\(redunsElementIndex)] {\n"
          output += try oneElementreduns.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          redunsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasSex {
               hashCode = (hashCode &* 31) &+ sex.hashValue
            }
            if hasNickName {
               hashCode = (hashCode &* 31) &+ nickName.hashValue
            }
            if hasModifyTime {
               hashCode = (hashCode &* 31) &+ modifyTime.hashValue
            }
            if hasAccount {
               hashCode = (hashCode &* 31) &+ account.hashValue
            }
            for oneElementreduns in reduns {
                hashCode = (hashCode &* 31) &+ oneElementreduns.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.UserInfo"
    }
    override public func className() -> String {
        return "ImProto.UserInfo"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.UserInfo.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.UserInfo = ImProto.UserInfo()
      public func getMessage() -> ImProto.UserInfo {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> ImProto.UserInfo.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> ImProto.UserInfo.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
      public var hasSex:Bool {
           get {
                return builderResult.hasSex
           }
      }
      public var sex:String {
           get {
                return builderResult.sex
           }
           set (value) {
               builderResult.hasSex = true
               builderResult.sex = value
           }
      }
      public func setSex(value:String) -> ImProto.UserInfo.Builder {
        self.sex = value
        return self
      }
      public func clearSex() -> ImProto.UserInfo.Builder{
           builderResult.hasSex = false
           builderResult.sex = ""
           return self
      }
      public var hasNickName:Bool {
           get {
                return builderResult.hasNickName
           }
      }
      public var nickName:String {
           get {
                return builderResult.nickName
           }
           set (value) {
               builderResult.hasNickName = true
               builderResult.nickName = value
           }
      }
      public func setNickName(value:String) -> ImProto.UserInfo.Builder {
        self.nickName = value
        return self
      }
      public func clearNickName() -> ImProto.UserInfo.Builder{
           builderResult.hasNickName = false
           builderResult.nickName = ""
           return self
      }
      public var hasModifyTime:Bool {
           get {
                return builderResult.hasModifyTime
           }
      }
      public var modifyTime:String {
           get {
                return builderResult.modifyTime
           }
           set (value) {
               builderResult.hasModifyTime = true
               builderResult.modifyTime = value
           }
      }
      public func setModifyTime(value:String) -> ImProto.UserInfo.Builder {
        self.modifyTime = value
        return self
      }
      public func clearModifyTime() -> ImProto.UserInfo.Builder{
           builderResult.hasModifyTime = false
           builderResult.modifyTime = ""
           return self
      }
      public var hasAccount:Bool {
           get {
                return builderResult.hasAccount
           }
      }
      public var account:String {
           get {
                return builderResult.account
           }
           set (value) {
               builderResult.hasAccount = true
               builderResult.account = value
           }
      }
      public func setAccount(value:String) -> ImProto.UserInfo.Builder {
        self.account = value
        return self
      }
      public func clearAccount() -> ImProto.UserInfo.Builder{
           builderResult.hasAccount = false
           builderResult.account = ""
           return self
      }
      public var reduns:Array<ImProto.MapFieldEntry> {
           get {
               return builderResult.reduns
           }
           set (value) {
               builderResult.reduns = value
           }
      }
      public func setReduns(value:Array<ImProto.MapFieldEntry>) -> ImProto.UserInfo.Builder {
        self.reduns = value
        return self
      }
      public func clearReduns() -> ImProto.UserInfo.Builder {
        builderResult.reduns.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.UserInfo.Builder {
        builderResult = ImProto.UserInfo()
        return self
      }
      public override func clone() throws -> ImProto.UserInfo.Builder {
        return try ImProto.UserInfo.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.UserInfo {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.UserInfo {
        let returnMe:ImProto.UserInfo = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.UserInfo) throws -> ImProto.UserInfo.Builder {
        if other == ImProto.UserInfo() {
         return self
        }
        if other.hasUserId {
             userId = other.userId
        }
        if other.hasSex {
             sex = other.sex
        }
        if other.hasNickName {
             nickName = other.nickName
        }
        if other.hasModifyTime {
             modifyTime = other.modifyTime
        }
        if other.hasAccount {
             account = other.account
        }
        if !other.reduns.isEmpty  {
           builderResult.reduns += other.reduns
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.UserInfo.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.UserInfo.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            userId = try input.readString()

          case 18 :
            sex = try input.readString()

          case 26 :
            nickName = try input.readString()

          case 34 :
            modifyTime = try input.readString()

          case 42 :
            account = try input.readString()

          case 50 :
            let subBuilder = ImProto.MapFieldEntry.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            reduns += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //用户状态
  final public class UserStat : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userId:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var status:ImProto.UserStatType = ImProto.UserStatType.UserStatusOnline
    public private(set) var hasStatus:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasUserId {
        return false
      }
      if !hasStatus {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUserId {
        try output.writeString(1, value:userId)
      }
      if hasStatus {
        try output.writeEnum(2, value:status.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUserId {
        serialize_size += userId.computeStringSize(1)
      }
      if (hasStatus) {
        serialize_size += status.rawValue.computeEnumSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ImProto.UserStat> {
      var mergedArray = Array<ImProto.UserStat>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ImProto.UserStat? {
      return try ImProto.UserStat.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ImProto.UserStat {
      return try ImProto.UserStat.Builder().mergeFromData(data, extensionRegistry:ImProto.BaseDefineRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ImProto.UserStat {
      return try ImProto.UserStat.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ImProto.UserStat {
      return try ImProto.UserStat.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.UserStat {
      return try ImProto.UserStat.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ImProto.UserStat {
      return try ImProto.UserStat.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.UserStat {
      return try ImProto.UserStat.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ImProto.UserStat.Builder {
      return ImProto.UserStat.classBuilder() as! ImProto.UserStat.Builder
    }
    public func getBuilder() -> ImProto.UserStat.Builder {
      return classBuilder() as! ImProto.UserStat.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ImProto.UserStat.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ImProto.UserStat.Builder()
    }
    public func toBuilder() throws -> ImProto.UserStat.Builder {
      return try ImProto.UserStat.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ImProto.UserStat) throws -> ImProto.UserStat.Builder {
      return try ImProto.UserStat.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if (hasStatus) {
        output += "\(indent) status: \(status.description)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasStatus {
               hashCode = (hashCode &* 31) &+ Int(status.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ImProto.UserStat"
    }
    override public func className() -> String {
        return "ImProto.UserStat"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ImProto.UserStat.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ImProto.UserStat = ImProto.UserStat()
      public func getMessage() -> ImProto.UserStat {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> ImProto.UserStat.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> ImProto.UserStat.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
        public var hasStatus:Bool{
            get {
                return builderResult.hasStatus
            }
        }
        public var status:ImProto.UserStatType {
            get {
                return builderResult.status
            }
            set (value) {
                builderResult.hasStatus = true
                builderResult.status = value
            }
        }
        public func setStatus(value:ImProto.UserStatType) -> ImProto.UserStat.Builder {
          self.status = value
          return self
        }
        public func clearStatus() -> ImProto.UserStat.Builder {
           builderResult.hasStatus = false
           builderResult.status = .UserStatusOnline
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ImProto.UserStat.Builder {
        builderResult = ImProto.UserStat()
        return self
      }
      public override func clone() throws -> ImProto.UserStat.Builder {
        return try ImProto.UserStat.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ImProto.UserStat {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ImProto.UserStat {
        let returnMe:ImProto.UserStat = builderResult
        return returnMe
      }
      public func mergeFrom(other:ImProto.UserStat) throws -> ImProto.UserStat.Builder {
        if other == ImProto.UserStat() {
         return self
        }
        if other.hasUserId {
             userId = other.userId
        }
        if other.hasStatus {
             status = other.status
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ImProto.UserStat.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ImProto.UserStat.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            userId = try input.readString()

          case 16 :
            let valueIntstatus = try input.readEnum()
            if let enumsstatus = ImProto.UserStatType(rawValue:valueIntstatus){
                 status = enumsstatus
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntstatus))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
